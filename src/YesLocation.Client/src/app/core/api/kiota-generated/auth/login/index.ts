/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /Auth/Login
 */
export interface LoginRequestBuilder extends BaseRequestBuilder<LoginRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     post(requestConfiguration?: RequestConfiguration<LoginRequestBuilderPostQueryParameters> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(requestConfiguration?: RequestConfiguration<LoginRequestBuilderPostQueryParameters> | undefined) : RequestInformation;
}
export interface LoginRequestBuilderPostQueryParameters {
    password?: string;
    usernameOrEmail?: string;
}
/**
 * Uri template for the request builder.
 */
export const LoginRequestBuilderUriTemplate = "{+baseurl}/Auth/Login{?Password*,UsernameOrEmail*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const LoginRequestBuilderPostQueryParametersMapper: Record<string, string> = {
    "password": "Password",
    "usernameOrEmail": "UsernameOrEmail",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const LoginRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: LoginRequestBuilderUriTemplate,
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        queryParametersMapper: LoginRequestBuilderPostQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
