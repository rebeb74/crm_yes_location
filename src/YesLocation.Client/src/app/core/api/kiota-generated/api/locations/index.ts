/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createLocationDtoFromDiscriminatorValue, serializeLocationDto, serializeLocationInputDto, type LocationDto, type LocationInputDto } from '../../models/index.js';
// @ts-ignore
import { LocationsItemRequestBuilderRequestsMetadata, type LocationsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/Locations
 */
export interface LocationsRequestBuilder extends BaseRequestBuilder<LocationsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.api.Locations.item collection
     * @param id Unique identifier of the item
     * @returns {LocationsItemRequestBuilder}
     */
     byId(id: number) : LocationsItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<LocationDto[]>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<LocationDto[] | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<LocationDto>}
     */
     post(body: LocationInputDto, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<LocationDto | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: LocationInputDto, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const LocationsRequestBuilderUriTemplate = "{+baseurl}/api/Locations";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const LocationsRequestBuilderNavigationMetadata: Record<Exclude<keyof LocationsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: LocationsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const LocationsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: LocationsRequestBuilderUriTemplate,
        responseBodyContentType: "text/plain;q=0.9",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createLocationDtoFromDiscriminatorValue,
    },
    post: {
        uriTemplate: LocationsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        adapterMethodName: "send",
        responseBodyFactory:  createLocationDtoFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeLocationInputDto,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
