{
  "version": 3,
  "sources": ["../../../../../../node_modules/@microsoft/kiota-serialization-text/dist/es/src/textParseNode.js", "../../../../../../node_modules/@microsoft/kiota-serialization-text/dist/es/src/textSerializationWriter.js", "../../../../../../node_modules/@microsoft/kiota-serialization-text/dist/es/src/browser/textParseNodeFactory.js", "../../../../../../node_modules/@microsoft/kiota-serialization-text/dist/es/src/textSerializationWriterFactory.js"],
  "sourcesContent": ["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { DateOnly, Duration, parseGuidString, TimeOnly, inNodeEnv, getEnumValueFromStringValue } from \"@microsoft/kiota-abstractions\";\n/**\n * This class represents a text parse node.\n */\nexport class TextParseNode {\n  constructor(text) {\n    this.text = text;\n    this.getStringValue = () => this.text;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.getChildNode = identifier => {\n      throw new Error(TextParseNode.noStructuredDataMessage);\n    };\n    this.getBooleanValue = () => {\n      var _a;\n      const value = (_a = this.getStringValue()) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n      if (value === \"true\" || value === \"1\") {\n        return true;\n      } else if (value === \"false\" || value === \"0\") {\n        return false;\n      }\n      return undefined;\n    };\n    this.getNumberValue = () => Number(this.text);\n    this.getGuidValue = () => parseGuidString(this.text);\n    this.getDateValue = () => new Date(Date.parse(this.text));\n    this.getDateOnlyValue = () => DateOnly.parse(this.getStringValue());\n    this.getTimeOnlyValue = () => TimeOnly.parse(this.getStringValue());\n    this.getDurationValue = () => Duration.parse(this.getStringValue());\n    this.getCollectionOfPrimitiveValues = () => {\n      throw new Error(TextParseNode.noStructuredDataMessage);\n    };\n    this.getCollectionOfEnumValues = type => {\n      throw new Error(TextParseNode.noStructuredDataMessage);\n    };\n    this.getEnumValue = type => {\n      const rawValue = this.getStringValue();\n      if (!rawValue) {\n        return undefined;\n      }\n      return getEnumValueFromStringValue(rawValue, type);\n    };\n    if (this.text && this.text.length > 1 && this.text.startsWith('\"') && this.text.endsWith('\"')) {\n      this.text = this.text.substring(1, this.text.length - 2);\n    }\n  }\n  getByteArrayValue() {\n    const strValue = this.getStringValue();\n    if (strValue && strValue.length > 0) {\n      return inNodeEnv() ? Buffer.from(strValue, \"base64\").buffer : new TextEncoder().encode(strValue);\n    }\n    return undefined;\n  }\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  getCollectionOfObjectValues(parsableFactory) {\n    throw new Error(TextParseNode.noStructuredDataMessage);\n  }\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  getObjectValue(parsableFactory) {\n    throw new Error(TextParseNode.noStructuredDataMessage);\n  }\n}\nTextParseNode.noStructuredDataMessage = \"text does not support structured data\";\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { inNodeEnv } from \"@microsoft/kiota-abstractions\";\nexport class TextSerializationWriter {\n  constructor() {\n    this.writer = [];\n    this.writeStringValue = (key, value) => {\n      if (key || key !== \"\") {\n        throw new Error(TextSerializationWriter.noStructuredDataMessage);\n      }\n      if (value !== undefined) {\n        if (this.writer.length > 0) {\n          throw new Error(\"a value was already written for this serialization writer, text content only supports a single value\");\n        } else {\n          const isNullValue = value === null;\n          this.writer.push(isNullValue ? \"null\" : value);\n        }\n      }\n    };\n    this.writeBooleanValue = (key, value) => {\n      if (value !== undefined) {\n        this.writeStringValue(key, `${value}`);\n      }\n    };\n    this.writeNumberValue = (key, value) => {\n      if (value === null) {\n        return this.writeNullValue(key);\n      }\n      if (value) {\n        this.writeStringValue(key, `${value}`);\n      }\n    };\n    this.writeGuidValue = (key, value) => {\n      if (value === null) {\n        return this.writeNullValue(key);\n      }\n      if (value) {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.writeStringValue(key, `\"${value}\"`);\n      }\n    };\n    this.writeDateValue = (key, value) => {\n      if (value === null) {\n        return this.writeNullValue(key);\n      }\n      if (value) {\n        this.writeStringValue(key, `\"${value.toISOString()}\"`);\n      }\n    };\n    this.writeDateOnlyValue = (key, value) => {\n      if (value === null) {\n        return this.writeNullValue(key);\n      }\n      if (value) {\n        this.writeStringValue(key, `\"${value.toString()}\"`);\n      }\n    };\n    this.writeTimeOnlyValue = (key, value) => {\n      if (value === null) {\n        return this.writeNullValue(key);\n      }\n      if (value) {\n        this.writeStringValue(key, `\"${value.toString()}\"`);\n      }\n    };\n    this.writeDurationValue = (key, value) => {\n      if (value === null) {\n        return this.writeNullValue(key);\n      }\n      if (value) {\n        this.writeStringValue(key, `\"${value.toString()}\"`);\n      }\n    };\n    this.writeNullValue = key => {\n      this.writeStringValue(key, `null`);\n    };\n    this.writeCollectionOfPrimitiveValues = (key, values) => {\n      throw new Error(TextSerializationWriter.noStructuredDataMessage);\n    };\n    this.writeCollectionOfObjectValues = (key, values, serializerMethod) => {\n      throw new Error(TextSerializationWriter.noStructuredDataMessage);\n    };\n    this.writeObjectValue = (key, value, serializerMethod) => {\n      throw new Error(TextSerializationWriter.noStructuredDataMessage);\n    };\n    this.writeEnumValue = (key, ...values) => {\n      if (values.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const rawValues = values.filter(x => x !== undefined).map(x => `${x}`);\n        if (rawValues.length > 0) {\n          this.writeStringValue(key, rawValues.reduce((x, y) => `${x},${y}`));\n        }\n      }\n    };\n    this.writeCollectionOfEnumValues = (key, values) => {\n      this.writeEnumValue(key, values);\n    };\n    this.getSerializedContent = () => {\n      return this.convertStringToArrayBuffer(this.writer.join(``));\n    };\n    this.convertStringToArrayBuffer = str => {\n      const encoder = new TextEncoder();\n      const encodedString = encoder.encode(str);\n      return encodedString.buffer;\n    };\n    this.writeAdditionalData = value => {\n      throw new Error(TextSerializationWriter.noStructuredDataMessage);\n    };\n  }\n  writeByteArrayValue(key, value) {\n    if (!value) {\n      throw new Error(\"value cannot be undefined\");\n    }\n    const b64 = inNodeEnv() ? Buffer.from(value).toString(\"base64\") : btoa(new TextDecoder().decode(value));\n    this.writeStringValue(key, b64);\n  }\n}\nTextSerializationWriter.noStructuredDataMessage = \"text does not support structured data\";\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { TextParseNode } from \"./../textParseNode.js\";\nexport class TextParseNodeFactory {\n  getValidContentType() {\n    return \"text/plain\";\n  }\n  getRootParseNode(contentType, content) {\n    if (!content) {\n      throw new Error(\"content cannot be undefined of empty\");\n    } else if (!contentType) {\n      throw new Error(\"content type cannot be undefined or empty\");\n    } else if (this.getValidContentType() !== contentType) {\n      throw new Error(`expected a ${this.getValidContentType()} content type`);\n    }\n    return new TextParseNode(this.convertArrayBufferToText(content));\n  }\n  convertArrayBufferToText(arrayBuffer) {\n    const decoder = new TextDecoder();\n    return decoder.decode(arrayBuffer);\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { TextSerializationWriter } from \"./textSerializationWriter.js\";\nexport class TextSerializationWriterFactory {\n  getValidContentType() {\n    return \"text/plain\";\n  }\n  getSerializationWriter(contentType) {\n    if (!contentType) {\n      throw new Error(\"content type cannot be undefined or empty\");\n    } else if (this.getValidContentType() !== contentType) {\n      throw new Error(`expected a ${this.getValidContentType()} content type`);\n    }\n    return new TextSerializationWriter();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
