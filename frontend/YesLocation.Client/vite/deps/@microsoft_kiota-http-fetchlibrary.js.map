{
  "version": 3,
  "sources": ["../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/customFetchHandler.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/httpClient.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/observabilityOptions.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/fetchRequestAdapter.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/utils/headersUtil.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/authorizationHandler.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/options/ChaosHandlerData.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/options/chaosStrategy.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/chaosHandler.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/options/compressionHandlerOptions.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/compressionHandler.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/options/headersInspectionOptions.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/headersInspectionHandler.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/options/parametersNameDecodingOptions.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/parametersNameDecodingHandler.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/options/redirectHandlerOptions.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/redirectHandler.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/options/retryHandlerOptions.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/retryHandler.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/options/version.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/options/userAgentHandlerOptions.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/userAgentHandler.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/options/urlReplaceHandlerOptions.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/urlReplaceHandler.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/options/chaosHandlerOptions.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/telemetryHandler.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/middlewares/middlewareFactory.js", "../../../../../../node_modules/@microsoft/kiota-http-fetchlibrary/dist/es/src/kiotaClientFactory.js"],
  "sourcesContent": ["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * Middleware\n * Class for FetchHandler\n */\nexport class CustomFetchHandler {\n  constructor(customFetch) {\n    this.customFetch = customFetch;\n  }\n  /**\n   * @inheritdoc\n   */\n  async execute(url, requestInit) {\n    return await this.customFetch(url, requestInit);\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { CustomFetchHandler } from \"./middlewares/customFetchHandler.js\";\nimport { MiddlewareFactory } from \"./index.js\";\nexport class HttpClient {\n  /**\n   *\n   * Creates an instance of a HttpClient which contains the middlewares and fetch implementation for request execution.\n   * @param customFetch - custom fetch function - a Fetch API implementation\n   * @param middlewares - an array of Middleware handlers\n   */\n  constructor(customFetch, ...middlewares) {\n    this.customFetch = customFetch;\n    // If no middlewares are provided, use the default ones\n    middlewares = (middlewares === null || middlewares === void 0 ? void 0 : middlewares.length) && middlewares[0] ? middlewares : MiddlewareFactory.getDefaultMiddlewares(customFetch);\n    // If a custom fetch function is provided, add a CustomFetchHandler to the end of the middleware chain\n    if (this.customFetch) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      middlewares.push(new CustomFetchHandler(customFetch));\n    }\n    // eslint-disable-next-line no-console\n    console.debug(\"Registered middlewares: \" + middlewares.map(m => m.constructor.name).join(\", \"));\n    // eslint-disable-next-line no-console\n    console.debug(\"Hint: To improve performance, use MiddlewareFactory.getPerformanceMiddlewares(customFetch) instead of MiddlewareFactory.getDefaultMiddlewares(customFetch)\");\n    // Set the middleware chain\n    this.setMiddleware(...middlewares);\n  }\n  /**\n   * Processes the middleware parameter passed to set this.middleware property\n   * The calling function should validate if middleware is not undefined or not empty.\n   * @param middleware - The middleware passed\n   */\n  setMiddleware(...middleware) {\n    for (let i = 0; i < middleware.length - 1; i++) {\n      middleware[i].next = middleware[i + 1];\n    }\n    this.middleware = middleware[0];\n  }\n  /**\n   * Executes a request and returns a promise resolving the response.\n   * @param url the request url.\n   * @param requestInit the RequestInit object.\n   * @param requestOptions the request options.\n   * @returns the promise resolving the response.\n   */\n  async executeFetch(url, requestInit, requestOptions) {\n    if (this.middleware) {\n      return await this.middleware.execute(url, requestInit, requestOptions);\n    } else if (this.customFetch) {\n      return this.customFetch(url, requestInit);\n    }\n    throw new Error(\"Please provide middlewares or a custom fetch function to execute the request\");\n  }\n}\n", "export const ObservabilityOptionKey = \"ObservabilityOptionKey\";\nexport class ObservabilityOptionsImpl {\n  constructor(originalOptions) {\n    this._originalOptions = originalOptions !== null && originalOptions !== void 0 ? originalOptions : {};\n  }\n  getKey() {\n    return ObservabilityOptionKey;\n  }\n  get includeEUIIAttributes() {\n    return this._originalOptions.includeEUIIAttributes;\n  }\n  set includeEUIIAttributes(value) {\n    this._originalOptions.includeEUIIAttributes = value;\n  }\n  getTracerInstrumentationName() {\n    return \"@microsoft/kiota-http-fetchlibrary\";\n  }\n}\n/**\n * Gets the observability options from the request options\n * @param requestOptions The request options\n * @returns The observability options\n */\nexport function getObservabilityOptionsFromRequest(requestOptions) {\n  if (requestOptions) {\n    const observabilityOptions = requestOptions[ObservabilityOptionKey];\n    if (observabilityOptions instanceof ObservabilityOptionsImpl) {\n      return observabilityOptions;\n    }\n  }\n  return undefined;\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { BackingStoreFactorySingleton, DefaultApiError, enableBackingStoreForParseNodeFactory, enableBackingStoreForSerializationWriterFactory, ParseNodeFactoryRegistry, ResponseHandlerOptionKey, SerializationWriterFactoryRegistry } from \"@microsoft/kiota-abstractions\";\nimport { SpanStatusCode, trace } from \"@opentelemetry/api\";\nimport { HttpClient } from \"./httpClient.js\";\nimport { ObservabilityOptionsImpl } from \"./observabilityOptions.js\";\n/**\n * Request adapter implementation for the fetch API.\n */\nexport class FetchRequestAdapter {\n  getSerializationWriterFactory() {\n    return this.serializationWriterFactory;\n  }\n  /**\n   * Instantiates a new request adapter.\n   * @param authenticationProvider the authentication provider to use.\n   * @param parseNodeFactory the parse node factory to deserialize responses.\n   * @param serializationWriterFactory the serialization writer factory to use to serialize request bodies.\n   * @param httpClient the http client to use to execute requests.\n   * @param observabilityOptions the observability options to use.\n   */\n  constructor(authenticationProvider, parseNodeFactory = ParseNodeFactoryRegistry.defaultInstance, serializationWriterFactory = SerializationWriterFactoryRegistry.defaultInstance, httpClient = new HttpClient(), observabilityOptions = new ObservabilityOptionsImpl()) {\n    this.authenticationProvider = authenticationProvider;\n    this.parseNodeFactory = parseNodeFactory;\n    this.serializationWriterFactory = serializationWriterFactory;\n    this.httpClient = httpClient;\n    /** The base url for every request. */\n    this.baseUrl = \"\";\n    this.getResponseContentType = response => {\n      var _a;\n      const header = (_a = response.headers.get(\"content-type\")) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n      if (!header) return undefined;\n      const segments = header.split(\";\");\n      if (segments.length === 0) return undefined;else return segments[0];\n    };\n    this.getResponseHandler = response => {\n      const options = response.getRequestOptions();\n      const responseHandlerOption = options[ResponseHandlerOptionKey];\n      return responseHandlerOption === null || responseHandlerOption === void 0 ? void 0 : responseHandlerOption.responseHandler;\n    };\n    this.sendCollectionOfPrimitive = (requestInfo, responseType, errorMappings) => {\n      if (!requestInfo) {\n        throw new Error(\"requestInfo cannot be null\");\n      }\n      return this.startTracingSpan(requestInfo, \"sendCollectionOfPrimitive\", async span => {\n        try {\n          const response = await this.getHttpResponseMessage(requestInfo, span);\n          const responseHandler = this.getResponseHandler(requestInfo);\n          if (responseHandler) {\n            span.addEvent(FetchRequestAdapter.eventResponseHandlerInvokedKey);\n            return await responseHandler.handleResponse(response, errorMappings);\n          } else {\n            try {\n              await this.throwIfFailedResponse(response, errorMappings, span);\n              if (this.shouldReturnUndefined(response)) return undefined;\n              switch (responseType) {\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                case \"Date\":\n                  // eslint-disable-next-line no-case-declarations\n                  const rootNode = await this.getRootParseNode(response);\n                  return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(`getCollectionOf${responseType}Value`, deserializeSpan => {\n                    try {\n                      span.setAttribute(FetchRequestAdapter.responseTypeAttributeKey, responseType);\n                      if (responseType === \"string\") {\n                        return rootNode.getCollectionOfPrimitiveValues();\n                      } else if (responseType === \"number\") {\n                        return rootNode.getCollectionOfPrimitiveValues();\n                      } else if (responseType === \"boolean\") {\n                        return rootNode.getCollectionOfPrimitiveValues();\n                      } else if (responseType === \"Date\") {\n                        return rootNode.getCollectionOfPrimitiveValues();\n                      } else if (responseType === \"Duration\") {\n                        return rootNode.getCollectionOfPrimitiveValues();\n                      } else if (responseType === \"DateOnly\") {\n                        return rootNode.getCollectionOfPrimitiveValues();\n                      } else if (responseType === \"TimeOnly\") {\n                        return rootNode.getCollectionOfPrimitiveValues();\n                      } else {\n                        throw new Error(\"unexpected type to deserialize\");\n                      }\n                    } finally {\n                      deserializeSpan.end();\n                    }\n                  });\n              }\n            } finally {\n              await this.purgeResponseBody(response);\n            }\n          }\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.sendCollection = (requestInfo, deserialization, errorMappings) => {\n      if (!requestInfo) {\n        throw new Error(\"requestInfo cannot be null\");\n      }\n      return this.startTracingSpan(requestInfo, \"sendCollection\", async span => {\n        try {\n          const response = await this.getHttpResponseMessage(requestInfo, span);\n          const responseHandler = this.getResponseHandler(requestInfo);\n          if (responseHandler) {\n            span.addEvent(FetchRequestAdapter.eventResponseHandlerInvokedKey);\n            return await responseHandler.handleResponse(response, errorMappings);\n          } else {\n            try {\n              await this.throwIfFailedResponse(response, errorMappings, span);\n              if (this.shouldReturnUndefined(response)) return undefined;\n              const rootNode = await this.getRootParseNode(response);\n              return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getCollectionOfObjectValues\", deserializeSpan => {\n                try {\n                  const result = rootNode.getCollectionOfObjectValues(deserialization);\n                  span.setAttribute(FetchRequestAdapter.responseTypeAttributeKey, \"object[]\");\n                  return result;\n                } finally {\n                  deserializeSpan.end();\n                }\n              });\n            } finally {\n              await this.purgeResponseBody(response);\n            }\n          }\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.startTracingSpan = (requestInfo, methodName, callback) => {\n      var _a;\n      const urlTemplate = decodeURIComponent((_a = requestInfo.urlTemplate) !== null && _a !== void 0 ? _a : \"\");\n      const telemetryPathValue = urlTemplate.replace(/\\{\\?[^}]+\\}/gi, \"\");\n      return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(`${methodName} - ${telemetryPathValue}`, async span => {\n        try {\n          span.setAttribute(\"url.uri_template\", urlTemplate);\n          return await callback(span);\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.send = (requestInfo, deserializer, errorMappings) => {\n      if (!requestInfo) {\n        throw new Error(\"requestInfo cannot be null\");\n      }\n      return this.startTracingSpan(requestInfo, \"send\", async span => {\n        try {\n          const response = await this.getHttpResponseMessage(requestInfo, span);\n          const responseHandler = this.getResponseHandler(requestInfo);\n          if (responseHandler) {\n            span.addEvent(FetchRequestAdapter.eventResponseHandlerInvokedKey);\n            return await responseHandler.handleResponse(response, errorMappings);\n          } else {\n            try {\n              await this.throwIfFailedResponse(response, errorMappings, span);\n              if (this.shouldReturnUndefined(response)) return undefined;\n              const rootNode = await this.getRootParseNode(response);\n              return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getObjectValue\", deserializeSpan => {\n                try {\n                  span.setAttribute(FetchRequestAdapter.responseTypeAttributeKey, \"object\");\n                  const result = rootNode.getObjectValue(deserializer);\n                  return result;\n                } finally {\n                  deserializeSpan.end();\n                }\n              });\n            } finally {\n              await this.purgeResponseBody(response);\n            }\n          }\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.sendPrimitive = (requestInfo, responseType, errorMappings) => {\n      if (!requestInfo) {\n        throw new Error(\"requestInfo cannot be null\");\n      }\n      return this.startTracingSpan(requestInfo, \"sendPrimitive\", async span => {\n        try {\n          const response = await this.getHttpResponseMessage(requestInfo, span);\n          const responseHandler = this.getResponseHandler(requestInfo);\n          if (responseHandler) {\n            span.addEvent(FetchRequestAdapter.eventResponseHandlerInvokedKey);\n            return await responseHandler.handleResponse(response, errorMappings);\n          } else {\n            try {\n              await this.throwIfFailedResponse(response, errorMappings, span);\n              if (this.shouldReturnUndefined(response)) return undefined;\n              switch (responseType) {\n                case \"ArrayBuffer\":\n                  if (!response.body) {\n                    return undefined;\n                  }\n                  return await response.arrayBuffer();\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                case \"Date\":\n                  // eslint-disable-next-line no-case-declarations\n                  const rootNode = await this.getRootParseNode(response);\n                  span.setAttribute(FetchRequestAdapter.responseTypeAttributeKey, responseType);\n                  return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(`get${responseType}Value`, deserializeSpan => {\n                    try {\n                      if (responseType === \"string\") {\n                        return rootNode.getStringValue();\n                      } else if (responseType === \"number\") {\n                        return rootNode.getNumberValue();\n                      } else if (responseType === \"boolean\") {\n                        return rootNode.getBooleanValue();\n                      } else if (responseType === \"Date\") {\n                        return rootNode.getDateValue();\n                      } else if (responseType === \"Duration\") {\n                        return rootNode.getDurationValue();\n                      } else if (responseType === \"DateOnly\") {\n                        return rootNode.getDateOnlyValue();\n                      } else if (responseType === \"TimeOnly\") {\n                        return rootNode.getTimeOnlyValue();\n                      } else {\n                        throw new Error(\"unexpected type to deserialize\");\n                      }\n                    } finally {\n                      deserializeSpan.end();\n                    }\n                  });\n              }\n            } finally {\n              await this.purgeResponseBody(response);\n            }\n          }\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.sendNoResponseContent = (requestInfo, errorMappings) => {\n      if (!requestInfo) {\n        throw new Error(\"requestInfo cannot be null\");\n      }\n      return this.startTracingSpan(requestInfo, \"sendNoResponseContent\", async span => {\n        try {\n          const response = await this.getHttpResponseMessage(requestInfo, span);\n          const responseHandler = this.getResponseHandler(requestInfo);\n          if (responseHandler) {\n            span.addEvent(FetchRequestAdapter.eventResponseHandlerInvokedKey);\n            return await responseHandler.handleResponse(response, errorMappings);\n          }\n          try {\n            await this.throwIfFailedResponse(response, errorMappings, span);\n          } finally {\n            await this.purgeResponseBody(response);\n          }\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.sendEnum = (requestInfo, enumObject, errorMappings) => {\n      if (!requestInfo) {\n        throw new Error(\"requestInfo cannot be null\");\n      }\n      return this.startTracingSpan(requestInfo, \"sendEnum\", async span => {\n        try {\n          const response = await this.getHttpResponseMessage(requestInfo, span);\n          const responseHandler = this.getResponseHandler(requestInfo);\n          if (responseHandler) {\n            span.addEvent(FetchRequestAdapter.eventResponseHandlerInvokedKey);\n            return await responseHandler.handleResponse(response, errorMappings);\n          } else {\n            try {\n              await this.throwIfFailedResponse(response, errorMappings, span);\n              if (this.shouldReturnUndefined(response)) return undefined;\n              const rootNode = await this.getRootParseNode(response);\n              return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getEnumValue\", deserializeSpan => {\n                try {\n                  span.setAttribute(FetchRequestAdapter.responseTypeAttributeKey, \"enum\");\n                  const result = rootNode.getEnumValue(enumObject);\n                  return result;\n                } finally {\n                  deserializeSpan.end();\n                }\n              });\n            } finally {\n              await this.purgeResponseBody(response);\n            }\n          }\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.sendCollectionOfEnum = (requestInfo, enumObject, errorMappings) => {\n      if (!requestInfo) {\n        throw new Error(\"requestInfo cannot be null\");\n      }\n      return this.startTracingSpan(requestInfo, \"sendCollectionOfEnum\", async span => {\n        try {\n          const response = await this.getHttpResponseMessage(requestInfo, span);\n          const responseHandler = this.getResponseHandler(requestInfo);\n          if (responseHandler) {\n            span.addEvent(FetchRequestAdapter.eventResponseHandlerInvokedKey);\n            return await responseHandler.handleResponse(response, errorMappings);\n          } else {\n            try {\n              await this.throwIfFailedResponse(response, errorMappings, span);\n              if (this.shouldReturnUndefined(response)) return undefined;\n              const rootNode = await this.getRootParseNode(response);\n              return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getCollectionOfEnumValues\", deserializeSpan => {\n                try {\n                  const result = rootNode.getCollectionOfEnumValues(enumObject);\n                  span.setAttribute(FetchRequestAdapter.responseTypeAttributeKey, \"enum[]\");\n                  return result;\n                } finally {\n                  deserializeSpan.end();\n                }\n              });\n            } finally {\n              await this.purgeResponseBody(response);\n            }\n          }\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.enableBackingStore = backingStoreFactory => {\n      this.parseNodeFactory = enableBackingStoreForParseNodeFactory(this.parseNodeFactory);\n      this.serializationWriterFactory = enableBackingStoreForSerializationWriterFactory(this.serializationWriterFactory);\n      if (!this.serializationWriterFactory || !this.parseNodeFactory) throw new Error(\"unable to enable backing store\");\n      if (backingStoreFactory) {\n        BackingStoreFactorySingleton.instance = backingStoreFactory;\n      }\n    };\n    this.getRootParseNode = response => {\n      return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getRootParseNode\", async span => {\n        try {\n          const payload = await response.arrayBuffer();\n          const responseContentType = this.getResponseContentType(response);\n          if (!responseContentType) throw new Error(\"no response content type found for deserialization\");\n          return this.parseNodeFactory.getRootParseNode(responseContentType, payload);\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.shouldReturnUndefined = response => {\n      return response.status === 204 || !response.body;\n    };\n    /**\n     * purges the response body if it hasn't been read to release the connection to the server\n     * @param response the response to purge\n     */\n    this.purgeResponseBody = async response => {\n      if (!response.bodyUsed && response.body) {\n        await response.arrayBuffer();\n      }\n    };\n    this.throwIfFailedResponse = (response, errorMappings, spanForAttributes) => {\n      return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"throwIfFailedResponse\", async span => {\n        var _a, _b, _c;\n        try {\n          if (response.ok || response.status >= 300 && response.status < 400 && !response.headers.has(FetchRequestAdapter.locationHeaderName)) return;\n          spanForAttributes.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: \"received_error_response\"\n          });\n          const statusCode = response.status;\n          const responseHeaders = {};\n          response.headers.forEach((value, key) => {\n            responseHeaders[key] = value.split(\",\");\n          });\n          const factory = errorMappings ? (_c = (_b = (_a = errorMappings[statusCode]) !== null && _a !== void 0 ? _a : statusCode >= 400 && statusCode < 500 ? errorMappings._4XX : undefined) !== null && _b !== void 0 ? _b : statusCode >= 500 && statusCode < 600 ? errorMappings._5XX : undefined) !== null && _c !== void 0 ? _c : errorMappings.XXX : undefined;\n          if (!factory) {\n            spanForAttributes.setAttribute(FetchRequestAdapter.errorMappingFoundAttributeName, false);\n            const error = new DefaultApiError(\"the server returned an unexpected status code and no error class is registered for this code \" + statusCode);\n            error.responseStatusCode = statusCode;\n            error.responseHeaders = responseHeaders;\n            spanForAttributes.recordException(error);\n            throw error;\n          }\n          spanForAttributes.setAttribute(FetchRequestAdapter.errorMappingFoundAttributeName, true);\n          const rootNode = await this.getRootParseNode(response);\n          let deserializedError = trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getObjectValue\", deserializeSpan => {\n            try {\n              return rootNode.getObjectValue(factory);\n            } finally {\n              deserializeSpan.end();\n            }\n          });\n          spanForAttributes.setAttribute(FetchRequestAdapter.errorBodyFoundAttributeName, !!deserializedError);\n          if (!deserializedError) deserializedError = new DefaultApiError(\"unexpected error type\" + typeof deserializedError);\n          const errorObject = deserializedError;\n          errorObject.responseStatusCode = statusCode;\n          errorObject.responseHeaders = responseHeaders;\n          spanForAttributes.recordException(errorObject);\n          throw errorObject;\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.getHttpResponseMessage = (requestInfo, spanForAttributes, claims) => {\n      return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getHttpResponseMessage\", async span => {\n        try {\n          if (!requestInfo) {\n            throw new Error(\"requestInfo cannot be null\");\n          }\n          this.setBaseUrlForRequestInformation(requestInfo);\n          const additionalContext = {};\n          if (claims) {\n            additionalContext.claims = claims;\n          }\n          await this.authenticationProvider.authenticateRequest(requestInfo, additionalContext);\n          const request = await this.getRequestFromRequestInformation(requestInfo, spanForAttributes);\n          if (this.observabilityOptions) {\n            requestInfo.addRequestOptions([this.observabilityOptions]);\n          }\n          let response = await this.httpClient.executeFetch(requestInfo.URL, request, requestInfo.getRequestOptions());\n          response = await this.retryCAEResponseIfRequired(requestInfo, response, spanForAttributes, claims);\n          if (response) {\n            const responseContentLength = response.headers.get(\"Content-Length\");\n            if (responseContentLength) {\n              spanForAttributes.setAttribute(\"http.response.body.size\", parseInt(responseContentLength, 10));\n            }\n            const responseContentType = response.headers.get(\"Content-Type\");\n            if (responseContentType) {\n              spanForAttributes.setAttribute(\"http.response.header.content-type\", responseContentType);\n            }\n            spanForAttributes.setAttribute(\"http.response.status_code\", response.status);\n            // getting the network.protocol.version (protocol version) is impossible with fetch API\n          }\n          return response;\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.retryCAEResponseIfRequired = async (requestInfo, response, spanForAttributes, claims) => {\n      return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"retryCAEResponseIfRequired\", async span => {\n        try {\n          const responseClaims = this.getClaimsFromResponse(response, claims);\n          if (responseClaims) {\n            span.addEvent(FetchRequestAdapter.authenticateChallengedEventKey);\n            spanForAttributes.setAttribute(\"http.request.resend_count\", 1);\n            await this.purgeResponseBody(response);\n            return await this.getHttpResponseMessage(requestInfo, spanForAttributes, responseClaims);\n          }\n          return response;\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.getClaimsFromResponse = (response, claims) => {\n      if (response.status === 401 && !claims) {\n        // avoid infinite loop, we only retry once\n        // no need to check for the content since it's an array and it doesn't need to be rewound\n        const rawAuthenticateHeader = response.headers.get(\"WWW-Authenticate\");\n        if (rawAuthenticateHeader && /^Bearer /gi.test(rawAuthenticateHeader)) {\n          const rawParameters = rawAuthenticateHeader.replace(/^Bearer /gi, \"\").split(\",\");\n          for (const rawParameter of rawParameters) {\n            const trimmedParameter = rawParameter.trim();\n            if (/claims=\"[^\"]+\"/gi.test(trimmedParameter)) {\n              return trimmedParameter.replace(/claims=\"([^\"]+)\"/gi, \"$1\");\n            }\n          }\n        }\n      }\n      return undefined;\n    };\n    this.setBaseUrlForRequestInformation = requestInfo => {\n      requestInfo.pathParameters.baseurl = this.baseUrl;\n    };\n    this.getRequestFromRequestInformation = (requestInfo, spanForAttributes) => {\n      // eslint-disable-next-line @typescript-eslint/require-await\n      return trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getRequestFromRequestInformation\", async span => {\n        var _a, _b;\n        try {\n          const method = (_a = requestInfo.httpMethod) === null || _a === void 0 ? void 0 : _a.toString();\n          const uri = requestInfo.URL;\n          spanForAttributes.setAttribute(\"http.request.method\", method !== null && method !== void 0 ? method : \"\");\n          const uriContainsScheme = uri.includes(\"://\");\n          const schemeSplatUri = uri.split(\"://\");\n          if (uriContainsScheme) {\n            spanForAttributes.setAttribute(\"server.address\", schemeSplatUri[0]);\n          }\n          const uriWithoutScheme = uriContainsScheme ? schemeSplatUri[1] : uri;\n          spanForAttributes.setAttribute(\"url.scheme\", uriWithoutScheme.split(\"/\")[0]);\n          if (this.observabilityOptions.includeEUIIAttributes) {\n            spanForAttributes.setAttribute(\"url.full\", decodeURIComponent(uri));\n          }\n          const requestContentLength = requestInfo.headers.tryGetValue(\"Content-Length\");\n          if (requestContentLength) {\n            spanForAttributes.setAttribute(\"http.response.body.size\", parseInt(requestContentLength[0], 10));\n          }\n          const requestContentType = requestInfo.headers.tryGetValue(\"Content-Type\");\n          if (requestContentType) {\n            spanForAttributes.setAttribute(\"http.request.header.content-type\", requestContentType);\n          }\n          const headers = {};\n          (_b = requestInfo.headers) === null || _b === void 0 ? void 0 : _b.forEach((_, key) => {\n            headers[key.toString().toLocaleLowerCase()] = this.foldHeaderValue(requestInfo.headers.tryGetValue(key));\n          });\n          const request = {\n            method,\n            headers,\n            body: requestInfo.content\n          };\n          return request;\n        } finally {\n          span.end();\n        }\n      });\n    };\n    this.foldHeaderValue = value => {\n      if (!value || value.length < 1) {\n        return \"\";\n      } else if (value.length === 1) {\n        return value[0];\n      } else {\n        return value.reduce((acc, val) => acc + val, \",\");\n      }\n    };\n    /**\n     * @inheritdoc\n     */\n    this.convertToNativeRequest = async requestInfo => {\n      if (!requestInfo) {\n        throw new Error(\"requestInfo cannot be null\");\n      }\n      await this.authenticationProvider.authenticateRequest(requestInfo, undefined);\n      return this.startTracingSpan(requestInfo, \"convertToNativeRequest\", async span => {\n        const request = await this.getRequestFromRequestInformation(requestInfo, span);\n        return request;\n      });\n    };\n    if (!authenticationProvider) {\n      throw new Error(\"authentication provider cannot be null\");\n    }\n    if (!parseNodeFactory) {\n      throw new Error(\"parse node factory cannot be null\");\n    }\n    if (!serializationWriterFactory) {\n      throw new Error(\"serialization writer factory cannot be null\");\n    }\n    if (!httpClient) {\n      throw new Error(\"http client cannot be null\");\n    }\n    if (!observabilityOptions) {\n      throw new Error(\"observability options cannot be null\");\n    } else {\n      this.observabilityOptions = new ObservabilityOptionsImpl(observabilityOptions);\n    }\n  }\n}\nFetchRequestAdapter.responseTypeAttributeKey = \"com.microsoft.kiota.response.type\";\nFetchRequestAdapter.eventResponseHandlerInvokedKey = \"com.microsoft.kiota.response_handler_invoked\";\nFetchRequestAdapter.errorMappingFoundAttributeName = \"com.microsoft.kiota.error.mapping_found\";\nFetchRequestAdapter.errorBodyFoundAttributeName = \"com.microsoft.kiota.error.body_found\";\nFetchRequestAdapter.locationHeaderName = \"Location\";\nFetchRequestAdapter.authenticateChallengedEventKey = \"com.microsoft.kiota.authenticate_challenge_received\";\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * @module MiddlewareUtil\n */\n/**\n * To get the request header from the request\n * @param options - The request options object\n * @param key - The header key string\n * @returns A header value for the given key from the request\n */\nexport const getRequestHeader = (options, key) => {\n  if (options && options.headers) {\n    return options.headers[key];\n  }\n  return undefined;\n};\n/**\n * To set the header value to the given request\n * @param options - The request options object\n * @param key - The header key string\n * @param value - The header value string\n */\nexport const setRequestHeader = (options, key, value) => {\n  if (options) {\n    if (!options.headers) {\n      options.headers = {};\n    }\n    options.headers[key] = value;\n  }\n};\n/**\n * To delete the header key to the given request\n * @param options - The request options object\n * @param key - The header key string\n */\nexport const deleteRequestHeader = (options, key) => {\n  if (options) {\n    if (!options.headers) {\n      options.headers = {};\n    }\n    delete options.headers[key];\n  }\n};\n/**\n * To append the header value to the given request\n * @param options - The request options object\n * @param key - The header key string\n * @param value - The header value string\n * @param separator - The separator string\n */\nexport const appendRequestHeader = (options, key, value, separator = \", \") => {\n  if (options) {\n    if (!options.headers) {\n      options.headers = {};\n    }\n    if (!options.headers[key]) {\n      options.headers[key] = value;\n    } else {\n      options.headers[key] += `${separator}${value}`;\n    }\n  }\n};\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { trace } from \"@opentelemetry/api\";\nimport { getObservabilityOptionsFromRequest } from \"../observabilityOptions.js\";\nimport { getRequestHeader, setRequestHeader } from \"../utils/headersUtil.js\";\nexport class AuthorizationHandler {\n  constructor(authenticationProvider) {\n    this.authenticationProvider = authenticationProvider;\n    this.getClaimsFromResponse = (response, claims) => {\n      if (response.status === 401 && !claims) {\n        // avoid infinite loop, we only retry once\n        // no need to check for the content since it's an array and it doesn't need to be rewound\n        const rawAuthenticateHeader = response.headers.get(\"WWW-Authenticate\");\n        if (rawAuthenticateHeader && /^Bearer /gi.test(rawAuthenticateHeader)) {\n          const rawParameters = rawAuthenticateHeader.replace(/^Bearer /gi, \"\").split(\",\");\n          for (const rawParameter of rawParameters) {\n            const trimmedParameter = rawParameter.trim();\n            if (/claims=\"[^\"]+\"/gi.test(trimmedParameter)) {\n              return trimmedParameter.replace(/claims=\"([^\"]+)\"/gi, \"$1\");\n            }\n          }\n        }\n      }\n      return undefined;\n    };\n    if (!authenticationProvider) {\n      throw new Error(\"authenticationProvider cannot be undefined\");\n    }\n  }\n  execute(url, requestInit, requestOptions) {\n    const obsOptions = getObservabilityOptionsFromRequest(requestOptions);\n    if (obsOptions) {\n      return trace.getTracer(obsOptions.getTracerInstrumentationName()).startActiveSpan(\"authorizationHandler - execute\", span => {\n        try {\n          span.setAttribute(\"com.microsoft.kiota.handler.authorization.enable\", true);\n          return this.executeInternal(url, requestInit, requestOptions, span);\n        } finally {\n          span.end();\n        }\n      });\n    }\n    return this.executeInternal(url, requestInit, requestOptions, undefined);\n  }\n  async executeInternal(url, fetchRequestInit, requestOptions, span) {\n    var _a, _b;\n    if (this.authorizationIsPresent(fetchRequestInit)) {\n      span === null || span === void 0 ? void 0 : span.setAttribute(\"com.microsoft.kiota.handler.authorization.token_present\", true);\n      return await this.next.execute(url, fetchRequestInit, requestOptions);\n    }\n    const token = await this.authenticateRequest(url);\n    setRequestHeader(fetchRequestInit, AuthorizationHandler.AUTHORIZATION_HEADER, `Bearer ${token}`);\n    const response = await ((_a = this.next) === null || _a === void 0 ? void 0 : _a.execute(url, fetchRequestInit, requestOptions));\n    if (!response) {\n      throw new Error(\"Response is undefined\");\n    }\n    if (response.status !== 401) {\n      return response;\n    }\n    const claims = this.getClaimsFromResponse(response);\n    if (!claims) {\n      return response;\n    }\n    span === null || span === void 0 ? void 0 : span.addEvent(\"com.microsoft.kiota.handler.authorization.challenge_received\");\n    const claimsToken = await this.authenticateRequest(url, claims);\n    setRequestHeader(fetchRequestInit, AuthorizationHandler.AUTHORIZATION_HEADER, `Bearer ${claimsToken}`);\n    span === null || span === void 0 ? void 0 : span.setAttribute(\"http.request.resend_count\", 1);\n    const retryResponse = await ((_b = this.next) === null || _b === void 0 ? void 0 : _b.execute(url, fetchRequestInit, requestOptions));\n    if (!retryResponse) {\n      throw new Error(\"Response is undefined\");\n    }\n    return retryResponse;\n  }\n  authorizationIsPresent(request) {\n    if (!request) {\n      return false;\n    }\n    const authorizationHeader = getRequestHeader(request, AuthorizationHandler.AUTHORIZATION_HEADER);\n    return authorizationHeader !== undefined && authorizationHeader !== null;\n  }\n  async authenticateRequest(url, claims) {\n    const additionalAuthenticationContext = {};\n    if (claims) {\n      additionalAuthenticationContext.claims = claims;\n    }\n    return await this.authenticationProvider.accessTokenProvider.getAuthorizationToken(url, additionalAuthenticationContext);\n  }\n}\n/**\n * A member holding the name of content range header\n */\nAuthorizationHandler.AUTHORIZATION_HEADER = \"Authorization\";\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * Contains RequestMethod to corresponding array of possible status codes, used for Random mode\n */\nexport const methodStatusCode = {\n  GET: [429, 500, 502, 503, 504],\n  POST: [429, 500, 502, 503, 504, 507],\n  PUT: [429, 500, 502, 503, 504, 507],\n  PATCH: [429, 500, 502, 503, 504],\n  DELETE: [429, 500, 502, 503, 504, 507]\n};\n/**\n * Contains statusCode to statusMessage map\n */\nexport const httpStatusCode = {\n  100: \"Continue\",\n  101: \"Switching Protocols\",\n  102: \"Processing\",\n  103: \"Early Hints\",\n  200: \"OK\",\n  201: \"Created\",\n  202: \"Accepted\",\n  203: \"Non-Authoritative Information\",\n  204: \"No Content\",\n  205: \"Reset Content\",\n  206: \"Partial Content\",\n  207: \"Multi-Status\",\n  208: \"Already Reported\",\n  226: \"IM Used\",\n  300: \"Multiple Choices\",\n  301: \"Moved Permanently\",\n  302: \"Found\",\n  303: \"See Other\",\n  304: \"Not Modified\",\n  305: \"Use Proxy\",\n  307: \"Temporary Redirect\",\n  308: \"Permanent Redirect\",\n  400: \"Bad Request\",\n  401: \"Unauthorized\",\n  402: \"Payment Required\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  405: \"Method Not Allowed\",\n  406: \"Not Acceptable\",\n  407: \"Proxy Authentication Required\",\n  408: \"Request Timeout\",\n  409: \"Conflict\",\n  410: \"Gone\",\n  411: \"Length Required\",\n  412: \"Precondition Failed\",\n  413: \"Payload Too Large\",\n  414: \"URI Too Long\",\n  415: \"Unsupported Media Type\",\n  416: \"Range Not Satisfiable\",\n  417: \"Expectation Failed\",\n  421: \"Misdirected Request\",\n  422: \"Unprocessable Entity\",\n  423: \"Locked\",\n  424: \"Failed Dependency\",\n  425: \"Too Early\",\n  426: \"Upgrade Required\",\n  428: \"Precondition Required\",\n  429: \"Too Many Requests\",\n  431: \"Request Header Fields Too Large\",\n  451: \"Unavailable For Legal Reasons\",\n  500: \"Internal Server Error\",\n  501: \"Not Implemented\",\n  502: \"Bad Gateway\",\n  503: \"Service Unavailable\",\n  504: \"Gateway Timeout\",\n  505: \"HTTP Version Not Supported\",\n  506: \"Variant Also Negotiates\",\n  507: \"Insufficient Storage\",\n  508: \"Loop Detected\",\n  510: \"Not Extended\",\n  511: \"Network Authentication Required\"\n};\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * @module ChaosStrategy\n */\n/**\n * Strategy used for Testing Handler\n */\nexport var ChaosStrategy;\n(function (ChaosStrategy) {\n  ChaosStrategy[ChaosStrategy[\"MANUAL\"] = 0] = \"MANUAL\";\n  ChaosStrategy[ChaosStrategy[\"RANDOM\"] = 1] = \"RANDOM\";\n})(ChaosStrategy || (ChaosStrategy = {}));\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { trace } from \"@opentelemetry/api\";\nimport { getObservabilityOptionsFromRequest } from \"../observabilityOptions.js\";\nimport { httpStatusCode, methodStatusCode } from \"./options/ChaosHandlerData.js\";\nimport { ChaosStrategy } from \"./options/chaosStrategy.js\";\n/**\n *\n * Class\n * Middleware\n * Class representing RedirectHandler\n */\nexport class ChaosHandler {\n  /**\n   *\n   * To create an instance of ChaosHandler\n   * @param [options] - The chaos handler options instance\n   * @param manualMap - The Map passed by user containing url-statusCode info\n   */\n  constructor(options, manualMap) {\n    /**\n     * A member holding options to customize the handler behavior\n     */\n    this.options = {\n      chaosStrategy: ChaosStrategy.RANDOM,\n      statusMessage: \"A random status message\",\n      chaosPercentage: 10\n    };\n    const chaosOptions = Object.assign(this.options, options);\n    if (chaosOptions.chaosPercentage > 100 || chaosOptions.chaosPercentage < 0) {\n      throw new Error(\"Chaos Percentage must be set to a value between 0 and 100.\");\n    }\n    this.options = chaosOptions;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.manualMap = manualMap !== null && manualMap !== void 0 ? manualMap : new Map();\n  }\n  /**\n   * Fetches a random status code for the RANDOM mode from the predefined array\n   * @param requestMethod - the API method for the request\n   * @returns a random status code from a given set of status codes\n   */\n  generateRandomStatusCode(requestMethod) {\n    const statusCodeArray = methodStatusCode[requestMethod];\n    return statusCodeArray[Math.floor(Math.random() * statusCodeArray.length)];\n  }\n  /**\n   * Strips out the host url and returns the relative url only\n   * @param chaosHandlerOptions - The ChaosHandlerOptions object\n   * @param urlMethod - the complete URL\n   * @returns the string as relative URL\n   */\n  getRelativeURL(chaosHandlerOptions, urlMethod) {\n    const baseUrl = chaosHandlerOptions.baseUrl;\n    if (baseUrl === undefined) {\n      return urlMethod;\n    }\n    return urlMethod.replace(baseUrl, \"\").trim();\n  }\n  /**\n   * Gets a status code from the options or a randomly generated status code\n   * @param chaosHandlerOptions - The ChaosHandlerOptions object\n   * @param requestURL - the URL for the request\n   * @param requestMethod - the API method for the request\n   * @returns generated statusCode\n   */\n  getStatusCode(chaosHandlerOptions, requestURL, requestMethod) {\n    if (chaosHandlerOptions.chaosStrategy === ChaosStrategy.MANUAL) {\n      if (chaosHandlerOptions.statusCode !== undefined) {\n        return chaosHandlerOptions.statusCode;\n      } else {\n        // manual mode with no status code, can be a global level or request level without statusCode\n        const relativeURL = this.getRelativeURL(chaosHandlerOptions, requestURL);\n        const definedResponses = this.manualMap.get(relativeURL);\n        if (definedResponses !== undefined) {\n          // checking Manual Map for exact match\n          const mapCode = definedResponses.get(requestMethod);\n          if (mapCode !== undefined) {\n            return mapCode;\n          }\n          // else statusCode would be undefined\n        } else {\n          // checking for regex match if exact match doesn't work\n          this.manualMap.forEach((value, key) => {\n            var _a;\n            const regexURL = new RegExp(key + \"$\");\n            if (regexURL.test(relativeURL)) {\n              const responseCode = (_a = this.manualMap.get(key)) === null || _a === void 0 ? void 0 : _a.get(requestMethod);\n              if (responseCode !== undefined) {\n                return responseCode;\n              }\n            }\n          });\n        }\n      }\n    }\n    // for manual mode status or if the url was not mapped to a code return a random status\n    return this.generateRandomStatusCode(requestMethod);\n  }\n  /**\n   * Generates a respondy for the chaoe response\n   * @param chaosHandlerOptions - The ChaosHandlerOptions object\n   * @param statusCode - the status code for the response\n   * @returns the response body\n   */\n  createResponseBody(chaosHandlerOptions, statusCode) {\n    if (chaosHandlerOptions.responseBody) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return chaosHandlerOptions.responseBody;\n    }\n    let body;\n    if (statusCode >= 400) {\n      const codeMessage = httpStatusCode[statusCode];\n      const errMessage = chaosHandlerOptions.statusMessage;\n      body = {\n        error: {\n          code: codeMessage,\n          message: errMessage\n        }\n      };\n    } else {\n      body = {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return body;\n  }\n  /**\n   * Composes a new chaotic response code with the configured parameters\n   * @param url The url of the request\n   * @param fetchRequestInit The fetch request init object\n   * @returns a response object with the configured parameters\n   */\n  createChaosResponse(url, fetchRequestInit) {\n    var _a;\n    if (fetchRequestInit.method === undefined) {\n      throw new Error(\"Request method must be defined.\");\n    }\n    const requestMethod = fetchRequestInit.method;\n    const statusCode = this.getStatusCode(this.options, url, requestMethod);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const responseBody = this.createResponseBody(this.options, statusCode);\n    const stringBody = typeof responseBody === \"string\" ? responseBody : JSON.stringify(responseBody);\n    return {\n      url,\n      body: stringBody,\n      status: statusCode,\n      statusText: this.options.statusMessage,\n      headers: (_a = this.options.headers) !== null && _a !== void 0 ? _a : {}\n    };\n  }\n  execute(url, requestInit, requestOptions) {\n    const obsOptions = getObservabilityOptionsFromRequest(requestOptions);\n    if (obsOptions) {\n      return trace.getTracer(obsOptions.getTracerInstrumentationName()).startActiveSpan(\"chaosHandler - execute\", span => {\n        try {\n          span.setAttribute(\"com.microsoft.kiota.handler.chaos.enable\", true);\n          return this.runChaos(url, requestInit, requestOptions);\n        } finally {\n          span.end();\n        }\n      });\n    }\n    return this.runChaos(url, requestInit, requestOptions);\n  }\n  runChaos(url, requestInit, requestOptions, span) {\n    if (Math.floor(Math.random() * 100) < this.options.chaosPercentage) {\n      span === null || span === void 0 ? void 0 : span.addEvent(ChaosHandler.chaosHandlerTriggeredEventKey);\n      return Promise.resolve(this.createChaosResponse(url, requestInit));\n    } else {\n      if (!this.next) {\n        throw new Error(\"Please set the next middleware to continue the request\");\n      }\n      return this.next.execute(url, requestInit, requestOptions);\n    }\n  }\n}\nChaosHandler.chaosHandlerTriggeredEventKey = \"com.microsoft.kiota.chaos_handler_triggered\";\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * Key for the compression replace handler options.\n */\nexport const CompressionHandlerOptionsKey = \"CompressionHandlerOptionsKey\";\n/**\n * Options for the compression handler.\n */\nexport class CompressionHandlerOptions {\n  /**\n   * Create a new instance of the CompressionHandlerOptions class\n   * @param config the configuration to apply to the compression handler options.\n   */\n  constructor(config) {\n    var _a;\n    this._enableCompression = (_a = config === null || config === void 0 ? void 0 : config.enableCompression) !== null && _a !== void 0 ? _a : true;\n  }\n  /**\n   * @inheritdoc\n   */\n  getKey() {\n    return CompressionHandlerOptionsKey;\n  }\n  /**\n   * Returns whether the compression handler is enabled or not.\n   * @returns whether the compression handler is enabled or not.\n   */\n  get ShouldCompress() {\n    return this._enableCompression;\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { inNodeEnv } from \"@microsoft/kiota-abstractions\";\nimport { trace } from \"@opentelemetry/api\";\nimport { getObservabilityOptionsFromRequest } from \"../observabilityOptions.js\";\nimport { CompressionHandlerOptions, CompressionHandlerOptionsKey } from \"./options/compressionHandlerOptions.js\";\nimport { deleteRequestHeader, getRequestHeader, setRequestHeader } from \"../utils/headersUtil.js\";\n/**\n * Compress the url content.\n */\nexport class CompressionHandler {\n  /**\n   * Creates a new instance of the CompressionHandler class\n   * @param handlerOptions The options for the compression handler.\n   * @returns An instance of the CompressionHandler class\n   */\n  constructor(handlerOptions = new CompressionHandlerOptions()) {\n    this.handlerOptions = handlerOptions;\n    if (!handlerOptions) {\n      throw new Error(\"handlerOptions cannot be undefined\");\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  execute(url, requestInit, requestOptions) {\n    let currentOptions = this.handlerOptions;\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions[CompressionHandlerOptionsKey]) {\n      currentOptions = requestOptions[CompressionHandlerOptionsKey];\n    }\n    const obsOptions = getObservabilityOptionsFromRequest(requestOptions);\n    if (obsOptions) {\n      return trace.getTracer(obsOptions.getTracerInstrumentationName()).startActiveSpan(\"compressionHandler - execute\", span => {\n        try {\n          span.setAttribute(\"com.microsoft.kiota.handler.compression.enable\", currentOptions.ShouldCompress);\n          return this.executeInternal(currentOptions, url, requestInit, requestOptions, span);\n        } finally {\n          span.end();\n        }\n      });\n    }\n    return this.executeInternal(currentOptions, url, requestInit, requestOptions);\n  }\n  async executeInternal(options, url, requestInit, requestOptions, span) {\n    var _a, _b, _c, _d;\n    if (!options.ShouldCompress || this.contentRangeBytesIsPresent(requestInit.headers) || this.contentEncodingIsPresent(requestInit.headers) || requestInit.body === null || requestInit.body === undefined) {\n      return (_b = (_a = this.next) === null || _a === void 0 ? void 0 : _a.execute(url, requestInit, requestOptions)) !== null && _b !== void 0 ? _b : Promise.reject(new Error(\"Response is undefined\"));\n    }\n    span === null || span === void 0 ? void 0 : span.setAttribute(\"http.request.body.compressed\", true);\n    const unCompressedBody = requestInit.body;\n    const unCompressedBodySize = this.getRequestBodySize(unCompressedBody);\n    // compress the request body\n    const compressedBody = await this.compressRequestBody(unCompressedBody);\n    // add Content-Encoding to request header\n    setRequestHeader(requestInit, CompressionHandler.CONTENT_ENCODING_HEADER, \"gzip\");\n    requestInit.body = compressedBody.compressedBody;\n    span === null || span === void 0 ? void 0 : span.setAttribute(\"http.request.body.size\", compressedBody.size);\n    // execute the next middleware and check if the response code is 415\n    let response = await ((_c = this.next) === null || _c === void 0 ? void 0 : _c.execute(url, requestInit, requestOptions));\n    if (!response) {\n      throw new Error(\"Response is undefined\");\n    }\n    if (response.status === 415) {\n      // remove the Content-Encoding header\n      deleteRequestHeader(requestInit, CompressionHandler.CONTENT_ENCODING_HEADER);\n      requestInit.body = unCompressedBody;\n      span === null || span === void 0 ? void 0 : span.setAttribute(\"http.request.body.compressed\", false);\n      span === null || span === void 0 ? void 0 : span.setAttribute(\"http.request.body.size\", unCompressedBodySize);\n      response = await ((_d = this.next) === null || _d === void 0 ? void 0 : _d.execute(url, requestInit, requestOptions));\n    }\n    return response !== undefined && response !== null ? Promise.resolve(response) : Promise.reject(new Error(\"Response is undefined\"));\n  }\n  contentRangeBytesIsPresent(header) {\n    var _a;\n    if (!header) {\n      return false;\n    }\n    const contentRange = getRequestHeader(header, CompressionHandler.CONTENT_RANGE_HEADER);\n    return (_a = contentRange === null || contentRange === void 0 ? void 0 : contentRange.toLowerCase().includes(\"bytes\")) !== null && _a !== void 0 ? _a : false;\n  }\n  contentEncodingIsPresent(header) {\n    if (!header) {\n      return false;\n    }\n    return getRequestHeader(header, CompressionHandler.CONTENT_ENCODING_HEADER) !== undefined;\n  }\n  getRequestBodySize(body) {\n    if (!body) {\n      return 0;\n    }\n    if (typeof body === \"string\") {\n      return body.length;\n    }\n    if (body instanceof Blob) {\n      return body.size;\n    }\n    if (body instanceof ArrayBuffer) {\n      return body.byteLength;\n    }\n    if (ArrayBuffer.isView(body)) {\n      return body.byteLength;\n    }\n    if (inNodeEnv() && Buffer.isBuffer(body)) {\n      return body.byteLength;\n    }\n    throw new Error(\"Unsupported body type\");\n  }\n  readBodyAsBytes(body) {\n    if (!body) {\n      return {\n        stream: new ReadableStream(),\n        size: 0\n      };\n    }\n    const uint8ArrayToStream = uint8Array => {\n      return new ReadableStream({\n        start(controller) {\n          controller.enqueue(uint8Array);\n          controller.close();\n        }\n      });\n    };\n    if (typeof body === \"string\") {\n      return {\n        stream: uint8ArrayToStream(new TextEncoder().encode(body)),\n        size: body.length\n      };\n    }\n    if (body instanceof Blob) {\n      return {\n        stream: body.stream(),\n        size: body.size\n      };\n    }\n    if (body instanceof ArrayBuffer) {\n      return {\n        stream: uint8ArrayToStream(new Uint8Array(body)),\n        size: body.byteLength\n      };\n    }\n    if (ArrayBuffer.isView(body)) {\n      return {\n        stream: uint8ArrayToStream(new Uint8Array(body.buffer, body.byteOffset, body.byteLength)),\n        size: body.byteLength\n      };\n    }\n    throw new Error(\"Unsupported body type\");\n  }\n  async compressRequestBody(body) {\n    const compressionData = this.readBodyAsBytes(body);\n    const compressedBody = await this.compressUsingCompressionStream(compressionData.stream);\n    return {\n      compressedBody: compressedBody.body,\n      size: compressedBody.size\n    };\n  }\n  async compressUsingCompressionStream(uint8ArrayStream) {\n    const compressionStream = new CompressionStream(\"gzip\");\n    const compressedStream = uint8ArrayStream.pipeThrough(compressionStream);\n    const reader = compressedStream.getReader();\n    const compressedChunks = [];\n    let totalLength = 0;\n    let result = await reader.read();\n    while (!result.done) {\n      const chunk = result.value;\n      compressedChunks.push(chunk);\n      totalLength += chunk.length;\n      result = await reader.read();\n    }\n    const compressedArray = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const chunk of compressedChunks) {\n      compressedArray.set(chunk, offset);\n      offset += chunk.length;\n    }\n    return {\n      body: compressedArray.buffer,\n      size: compressedArray.length\n    };\n  }\n}\n/**\n * A member holding the name of content range header\n */\nCompressionHandler.CONTENT_RANGE_HEADER = \"Content-Range\";\n/**\n * A member holding the name of content encoding header\n */\nCompressionHandler.CONTENT_ENCODING_HEADER = \"Content-Encoding\";\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { Headers } from \"@microsoft/kiota-abstractions\";\nexport const HeadersInspectionOptionsKey = \"HeadersInspectionOptionsKey\";\n/**\n * RequestOption\n * Options\n * Options to inspect headers\n */\nexport class HeadersInspectionOptions {\n  /**\n   * Gets the request headers\n   * @returns the request headers\n   */\n  getRequestHeaders() {\n    return this.requestHeaders;\n  }\n  /**\n   * Gets the response headers\n   * @returns the response headers\n   */\n  getResponseHeaders() {\n    return this.responseHeaders;\n  }\n  /**\n   *\n   * To create an instance of HeadersInspectionOptions\n   * @param [options] - The headers inspection options value\n   * @returns An instance of HeadersInspectionOptions\n   * @example const options = new HeadersInspectionOptions({ inspectRequestHeaders: true, inspectResponseHeaders: true });\n   */\n  constructor(options = {}) {\n    var _a, _b;\n    this.requestHeaders = new Headers();\n    this.responseHeaders = new Headers();\n    this.inspectRequestHeaders = (_a = options.inspectRequestHeaders) !== null && _a !== void 0 ? _a : false;\n    this.inspectResponseHeaders = (_b = options.inspectResponseHeaders) !== null && _b !== void 0 ? _b : false;\n  }\n  getKey() {\n    return HeadersInspectionOptionsKey;\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { trace } from \"@opentelemetry/api\";\nimport { getObservabilityOptionsFromRequest } from \"../observabilityOptions.js\";\nimport { HeadersInspectionOptions, HeadersInspectionOptionsKey } from \"./options/headersInspectionOptions.js\";\n/**\n * Middleware\n * Inspects the headers of the request and response\n */\nexport class HeadersInspectionHandler {\n  /**\n   *\n   * Creates new instance of HeadersInspectionHandler\n   * @param _options The options for inspecting the headers\n   */\n  constructor(_options = new HeadersInspectionOptions()) {\n    this._options = _options;\n  }\n  execute(url, requestInit, requestOptions) {\n    let currentOptions = this._options;\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions[HeadersInspectionOptionsKey]) {\n      currentOptions = requestOptions[HeadersInspectionOptionsKey];\n    }\n    const obsOptions = getObservabilityOptionsFromRequest(requestOptions);\n    if (obsOptions) {\n      return trace.getTracer(obsOptions.getTracerInstrumentationName()).startActiveSpan(\"retryHandler - execute\", span => {\n        try {\n          span.setAttribute(\"com.microsoft.kiota.handler.headersInspection.enable\", true);\n          return this.executeInternal(url, requestInit, requestOptions, currentOptions);\n        } finally {\n          span.end();\n        }\n      });\n    }\n    return this.executeInternal(url, requestInit, requestOptions, currentOptions);\n  }\n  async executeInternal(url, requestInit, requestOptions, currentOptions) {\n    if (!this.next) {\n      throw new Error(\"next middleware is undefined.\");\n    }\n    if (currentOptions.inspectRequestHeaders && requestInit.headers) {\n      for (const [key, value] of requestInit.headers) {\n        currentOptions.getRequestHeaders().add(key, value);\n      }\n    }\n    const response = await this.next.execute(url, requestInit, requestOptions);\n    if (currentOptions.inspectResponseHeaders && response.headers) {\n      for (const [key, value] of response.headers.entries()) {\n        currentOptions.getResponseHeaders().add(key, value);\n      }\n    }\n    return response;\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nexport const ParametersNameDecodingHandlerOptionsKey = \"RetryHandlerOptionKey\";\n/** The ParametersNameDecodingOptions request class */\nexport class ParametersNameDecodingHandlerOptions {\n  getKey() {\n    return ParametersNameDecodingHandlerOptionsKey;\n  }\n  /**\n   *\n   * To create an instance of ParametersNameDecodingHandlerOptions\n   * @param [options] - The optional parameters\n   * @returns An instance of ParametersNameDecodingHandlerOptions\n   * @example ParametersNameDecodingHandlerOptions({ enable: true, charactersToDecode: [\".\", \"-\", \"~\", \"$\"] });\n   */\n  constructor(options = {}) {\n    var _a, _b;\n    this.enable = (_a = options.enable) !== null && _a !== void 0 ? _a : true;\n    this.charactersToDecode = (_b = options.charactersToDecode) !== null && _b !== void 0 ? _b : [\".\", \"-\", \"~\", \"$\"];\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { trace } from \"@opentelemetry/api\";\nimport { getObservabilityOptionsFromRequest } from \"../observabilityOptions.js\";\nimport { ParametersNameDecodingHandlerOptions, ParametersNameDecodingHandlerOptionsKey } from \"./options/parametersNameDecodingOptions.js\";\n/**\n * @module ParametersNameDecodingHandler\n */\nexport class ParametersNameDecodingHandler {\n  /**\n   *\n   * To create an instance of ParametersNameDecodingHandler\n   * @param [options] - The parameters name decoding handler options value\n   */\n  constructor(options = new ParametersNameDecodingHandlerOptions()) {\n    this.options = options;\n    if (!options) {\n      throw new Error(\"The options parameter is required.\");\n    }\n  }\n  /**\n   * To execute the current middleware\n   * @param url - The url to be fetched\n   * @param requestInit - The request init object\n   * @param requestOptions - The request options\n   * @returns A Promise that resolves to nothing\n   */\n  execute(url, requestInit, requestOptions) {\n    let currentOptions = this.options;\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions[ParametersNameDecodingHandlerOptionsKey]) {\n      currentOptions = requestOptions[ParametersNameDecodingHandlerOptionsKey];\n    }\n    const obsOptions = getObservabilityOptionsFromRequest(requestOptions);\n    if (obsOptions) {\n      return trace.getTracer(obsOptions.getTracerInstrumentationName()).startActiveSpan(\"parametersNameDecodingHandler - execute\", span => {\n        try {\n          span.setAttribute(\"com.microsoft.kiota.handler.parameters_name_decoding.enable\", currentOptions.enable);\n          return this.decodeParameters(url, requestInit, currentOptions, requestOptions);\n        } finally {\n          span.end();\n        }\n      });\n    }\n    return this.decodeParameters(url, requestInit, currentOptions, requestOptions);\n  }\n  decodeParameters(url, requestInit, currentOptions, requestOptions) {\n    var _a, _b;\n    let updatedUrl = url;\n    if (currentOptions && currentOptions.enable && url.includes(\"%\") && currentOptions.charactersToDecode && currentOptions.charactersToDecode.length > 0) {\n      currentOptions.charactersToDecode.forEach(character => {\n        updatedUrl = updatedUrl.replace(new RegExp(`%${character.charCodeAt(0).toString(16)}`, \"gi\"), character);\n      });\n    }\n    return (_b = (_a = this.next) === null || _a === void 0 ? void 0 : _a.execute(updatedUrl, requestInit, requestOptions)) !== null && _b !== void 0 ? _b : Promise.reject(new Error(\"The next middleware is not set.\"));\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nexport const RedirectHandlerOptionKey = \"RedirectHandlerOption\";\n/**\n * MiddlewareOptions\n * A class representing RedirectHandlerOptions\n */\nexport class RedirectHandlerOptions {\n  /**\n   *\n   * To create an instance of RedirectHandlerOptions\n   * @param [options] - The redirect handler options instance\n   * @returns An instance of RedirectHandlerOptions\n   * @throws Error if maxRedirects is more than 20 or less than 0\n   * @example\tconst options = new RedirectHandlerOptions({ maxRedirects: 5 });\n   */\n  constructor(options = {}) {\n    var _a, _b;\n    if (options.maxRedirects && options.maxRedirects > RedirectHandlerOptions.MAX_MAX_REDIRECTS) {\n      const error = new Error(`MaxRedirects should not be more than ${RedirectHandlerOptions.MAX_MAX_REDIRECTS}`);\n      error.name = \"MaxLimitExceeded\";\n      throw error;\n    }\n    if (options.maxRedirects !== undefined && options.maxRedirects < 0) {\n      const error = new Error(`MaxRedirects should not be negative`);\n      error.name = \"MinExpectationNotMet\";\n      throw error;\n    }\n    this.maxRedirects = (_a = options.maxRedirects) !== null && _a !== void 0 ? _a : RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS;\n    this.shouldRedirect = (_b = options.shouldRedirect) !== null && _b !== void 0 ? _b : RedirectHandlerOptions.defaultShouldRetry;\n  }\n  getKey() {\n    return RedirectHandlerOptionKey;\n  }\n}\n/**\n * A member holding default max redirects value\n */\nRedirectHandlerOptions.DEFAULT_MAX_REDIRECTS = 5;\n/**\n * A member holding maximum max redirects value\n */\nRedirectHandlerOptions.MAX_MAX_REDIRECTS = 20;\n/**\n *\n * A member holding default shouldRedirect callback\n * @returns true\n */\nRedirectHandlerOptions.defaultShouldRetry = () => true;\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * @module RedirectHandler\n */\nimport { HttpMethod } from \"@microsoft/kiota-abstractions\";\nimport { trace } from \"@opentelemetry/api\";\nimport { getObservabilityOptionsFromRequest } from \"../observabilityOptions.js\";\nimport { RedirectHandlerOptionKey, RedirectHandlerOptions } from \"./options/redirectHandlerOptions.js\";\n/**\n *\n * Class\n * Middleware\n * Class representing RedirectHandler\n */\nexport class RedirectHandler {\n  /**\n   *\n   *\n   * To create an instance of RedirectHandler\n   * @param [options] - The redirect handler options instance\n   * @returns An instance of RedirectHandler\n   */\n  constructor(options = new RedirectHandlerOptions()) {\n    this.options = options;\n    if (!options) {\n      throw new Error(\"The options parameter is required.\");\n    }\n  }\n  /**\n   *\n   * To check whether the response has the redirect status code or not\n   * @param response - The response object\n   * @returns A boolean representing whether the response contains the redirect status code or not\n   */\n  isRedirect(response) {\n    return RedirectHandler.REDIRECT_STATUS_CODES.has(response.status);\n  }\n  /**\n   *\n   * To check whether the response has location header or not\n   * @param response - The response object\n   * @returns A boolean representing the whether the response has location header or not\n   */\n  hasLocationHeader(response) {\n    return response.headers.has(RedirectHandler.LOCATION_HEADER);\n  }\n  /**\n   *\n   * To get the redirect url from location header in response object\n   * @param response - The response object\n   * @returns A redirect url from location header\n   */\n  getLocationHeader(response) {\n    return response.headers.get(RedirectHandler.LOCATION_HEADER);\n  }\n  /**\n   *\n   * To check whether the given url is a relative url or not\n   * @param url - The url string value\n   * @returns A boolean representing whether the given url is a relative url or not\n   */\n  isRelativeURL(url) {\n    return !url.includes(\"://\");\n  }\n  /**\n   *\n   * To check whether the authorization header in the request should be dropped for consequent redirected requests\n   * @param requestUrl - The request url value\n   * @param redirectUrl - The redirect url value\n   * @returns A boolean representing whether the authorization header in the request should be dropped for consequent redirected requests\n   */\n  shouldDropAuthorizationHeader(requestUrl, redirectUrl) {\n    const schemeHostRegex = /^[A-Za-z].+?:\\/\\/.+?(?=\\/|$)/;\n    const requestMatches = schemeHostRegex.exec(requestUrl);\n    let requestAuthority;\n    let redirectAuthority;\n    if (requestMatches !== null) {\n      requestAuthority = requestMatches[0];\n    }\n    const redirectMatches = schemeHostRegex.exec(redirectUrl);\n    if (redirectMatches !== null) {\n      redirectAuthority = redirectMatches[0];\n    }\n    return typeof requestAuthority !== \"undefined\" && typeof redirectAuthority !== \"undefined\" && requestAuthority !== redirectAuthority;\n  }\n  /**\n   * To execute the next middleware and to handle in case of redirect response returned by the server\n   * @param url - The url string value\n   * @param fetchRequestInit - The Fetch RequestInit object\n   * @param redirectCount - The redirect count value\n   * @param currentOptions - The redirect handler options instance\n   * @param requestOptions - The request options\n   * @param tracerName - The name to use for the tracer\n   * @returns A promise that resolves to nothing\n   */\n  async executeWithRedirect(url, fetchRequestInit, redirectCount, currentOptions, requestOptions, tracerName) {\n    var _a;\n    const response = await ((_a = this.next) === null || _a === void 0 ? void 0 : _a.execute(url, fetchRequestInit, requestOptions));\n    if (!response) {\n      throw new Error(\"Response is undefined\");\n    }\n    if (redirectCount < currentOptions.maxRedirects && this.isRedirect(response) && this.hasLocationHeader(response) && currentOptions.shouldRedirect(response)) {\n      ++redirectCount;\n      if (response.status === RedirectHandler.STATUS_CODE_SEE_OTHER) {\n        fetchRequestInit.method = HttpMethod.GET;\n        delete fetchRequestInit.body;\n      } else {\n        const redirectUrl = this.getLocationHeader(response);\n        if (redirectUrl) {\n          if (fetchRequestInit.headers && !this.isRelativeURL(redirectUrl) && this.shouldDropAuthorizationHeader(url, redirectUrl)) {\n            delete fetchRequestInit.headers[RedirectHandler.AUTHORIZATION_HEADER];\n          }\n          url = redirectUrl;\n        }\n      }\n      if (tracerName) {\n        return trace.getTracer(tracerName).startActiveSpan(`redirectHandler - redirect ${redirectCount}`, span => {\n          try {\n            span.setAttribute(\"com.microsoft.kiota.handler.redirect.count\", redirectCount);\n            span.setAttribute(\"http.response.status_code\", response.status);\n            return this.executeWithRedirect(url, fetchRequestInit, redirectCount, currentOptions, requestOptions);\n          } finally {\n            span.end();\n          }\n        });\n      }\n      return await this.executeWithRedirect(url, fetchRequestInit, redirectCount, currentOptions, requestOptions);\n    } else {\n      return response;\n    }\n  }\n  /**\n   * Executes the request and returns a promise resolving the response.\n   * @param url - The url for the request\n   * @param requestInit - The Fetch RequestInit object.\n   * @param requestOptions - The request options.\n   * @returns A Promise that resolves to the response.\n   */\n  execute(url, requestInit, requestOptions) {\n    const redirectCount = 0;\n    let currentOptions = this.options;\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions[RedirectHandlerOptionKey]) {\n      currentOptions = requestOptions[RedirectHandlerOptionKey];\n    }\n    requestInit.redirect = RedirectHandler.MANUAL_REDIRECT;\n    const obsOptions = getObservabilityOptionsFromRequest(requestOptions);\n    if (obsOptions) {\n      return trace.getTracer(obsOptions.getTracerInstrumentationName()).startActiveSpan(\"redirectHandler - execute\", span => {\n        try {\n          span.setAttribute(\"com.microsoft.kiota.handler.redirect.enable\", true);\n          return this.executeWithRedirect(url, requestInit, redirectCount, currentOptions, requestOptions, obsOptions.getTracerInstrumentationName());\n        } finally {\n          span.end();\n        }\n      });\n    }\n    return this.executeWithRedirect(url, requestInit, redirectCount, currentOptions, requestOptions);\n  }\n}\n/**\n * A member holding the array of redirect status codes\n */\nRedirectHandler.REDIRECT_STATUS_CODES = new Set([301,\n// Moved Permanently\n302,\n// Found\n303,\n// See Other\n307,\n// Temporary Permanently\n308 // Moved Permanently\n]);\n/**\n * A member holding SeeOther status code\n */\nRedirectHandler.STATUS_CODE_SEE_OTHER = 303;\n/**\n * A member holding the name of the location header\n */\nRedirectHandler.LOCATION_HEADER = \"Location\";\n/**\n * A member representing the authorization header name\n */\nRedirectHandler.AUTHORIZATION_HEADER = \"Authorization\";\n/**\n * A member holding the manual redirect value\n */\nRedirectHandler.MANUAL_REDIRECT = \"manual\";\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nexport const RetryHandlerOptionKey = \"RetryHandlerOptionKey\";\n/**\n * RequestOption\n * Options\n * Class for RetryHandlerOptions\n */\nexport class RetryHandlerOptions {\n  /**\n   *\n   * To create an instance of RetryHandlerOptions\n   * @param options - The RetryHandlerOptionsParams object\n   * @returns An instance of RetryHandlerOptions\n   * @example\tconst options = new RetryHandlerOptions({ maxRetries: 4 });\n   */\n  constructor(options = {}) {\n    var _a, _b, _c;\n    if (options.delay !== undefined && options.delay > RetryHandlerOptions.MAX_DELAY) {\n      throw this.createError(`Delay should not be more than ${RetryHandlerOptions.MAX_DELAY}`, \"MaxLimitExceeded\");\n    }\n    if (options.maxRetries !== undefined && options.maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {\n      throw this.createError(`MaxRetries should not be more than ${RetryHandlerOptions.MAX_MAX_RETRIES}`, \"MaxLimitExceeded\");\n    }\n    if (options.delay !== undefined && options.delay < 0) {\n      throw this.createError(`Delay should not be negative`, \"MinExpectationNotMet\");\n    }\n    if (options.maxRetries !== undefined && options.maxRetries < 0) {\n      throw this.createError(`MaxRetries should not be negative`, \"MinExpectationNotMet\");\n    }\n    this.delay = Math.min((_a = options.delay) !== null && _a !== void 0 ? _a : RetryHandlerOptions.DEFAULT_DELAY, RetryHandlerOptions.MAX_DELAY);\n    this.maxRetries = Math.min((_b = options.maxRetries) !== null && _b !== void 0 ? _b : RetryHandlerOptions.DEFAULT_MAX_RETRIES, RetryHandlerOptions.MAX_MAX_RETRIES);\n    this.shouldRetry = (_c = options.shouldRetry) !== null && _c !== void 0 ? _c : RetryHandlerOptions.defaultShouldRetry;\n  }\n  /**\n   *\n   * Creates an error object with a message and name\n   * @param message - The error message\n   * @param name - The error name\n   * @returns An error object\n   */\n  createError(message, name) {\n    const error = new Error(message);\n    error.name = name;\n    return error;\n  }\n  /**\n   *\n   * To get the maximum delay\n   * @returns A maximum delay\n   */\n  getMaxDelay() {\n    return RetryHandlerOptions.MAX_DELAY;\n  }\n  getKey() {\n    return RetryHandlerOptionKey;\n  }\n}\n/**\n * A member holding default delay value in seconds\n */\nRetryHandlerOptions.DEFAULT_DELAY = 3;\n/**\n * A member holding default maxRetries value\n */\nRetryHandlerOptions.DEFAULT_MAX_RETRIES = 3;\n/**\n * A member holding maximum delay value in seconds\n */\nRetryHandlerOptions.MAX_DELAY = 180;\n/**\n * A member holding maximum maxRetries value\n */\nRetryHandlerOptions.MAX_MAX_RETRIES = 10;\n/**\n * A member holding default shouldRetry callback\n * @returns true\n */\nRetryHandlerOptions.defaultShouldRetry = () => true;\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * @module RetryHandler\n */\nimport { HttpMethod } from \"@microsoft/kiota-abstractions\";\nimport { trace } from \"@opentelemetry/api\";\nimport { getObservabilityOptionsFromRequest } from \"../observabilityOptions.js\";\nimport { getRequestHeader, setRequestHeader } from \"../utils/headersUtil.js\";\nimport { RetryHandlerOptionKey, RetryHandlerOptions } from \"./options/retryHandlerOptions.js\";\n/**\n * Middleware\n * Class for RetryHandler\n */\nexport class RetryHandler {\n  /**\n   *\n   * To create an instance of RetryHandler\n   * @param [options] - The retry handler options value\n   * @returns An instance of RetryHandler\n   */\n  constructor(options = new RetryHandlerOptions()) {\n    this.options = options;\n    if (!options) {\n      throw new Error(\"The options parameter is required.\");\n    }\n  }\n  /**\n   *\n   *\n   * To check whether the response has the retry status code\n   * @param response - The response object\n   * @returns Whether the response has retry status code or not\n   */\n  isRetry(response) {\n    return RetryHandler.RETRY_STATUS_CODES.has(response.status);\n  }\n  /**\n   *\n   * To check whether the payload is buffered or not\n   * @param options - The options of a request\n   * @returns Whether the payload is buffered or not\n   */\n  isBuffered(options) {\n    var _a;\n    const method = options.method;\n    const isPutPatchOrPost = method === HttpMethod.PUT || method === HttpMethod.PATCH || method === HttpMethod.POST;\n    if (isPutPatchOrPost) {\n      const isStream = ((_a = getRequestHeader(options, \"content-type\")) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === \"application/octet-stream\";\n      if (isStream) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   *\n   * To get the delay for a retry\n   * @param response - The response object\n   * @param retryAttempts - The current attempt count\n   * @param delay - The delay value in seconds\n   * @returns A delay for a retry\n   */\n  getDelay(response, retryAttempts, delay) {\n    const getRandomness = () => Number(Math.random().toFixed(3));\n    const retryAfter = response.headers !== undefined ? response.headers.get(RetryHandler.RETRY_AFTER_HEADER) : null;\n    let newDelay;\n    if (retryAfter !== null) {\n      // Retry-After: <http-date>\n      if (Number.isNaN(Number(retryAfter))) {\n        newDelay = Math.round((new Date(retryAfter).getTime() - Date.now()) / 1000);\n      } else {\n        // Retry-After: <delay-seconds>\n        newDelay = Number(retryAfter);\n      }\n    } else {\n      // Adding randomness to avoid retrying at a same\n      newDelay = retryAttempts >= 2 ? this.getExponentialBackOffTime(retryAttempts) + delay + getRandomness() : delay + getRandomness();\n    }\n    return Math.min(newDelay, this.options.getMaxDelay() + getRandomness());\n  }\n  /**\n   *\n   * To get an exponential back off value\n   * @param attempts - The current attempt count\n   * @returns An exponential back off value\n   */\n  getExponentialBackOffTime(attempts) {\n    return Math.round(1 / 2 * (2 ** attempts - 1));\n  }\n  /**\n   * To add delay for the execution\n   * @param delaySeconds - The delay value in seconds\n   * @returns A Promise that resolves to nothing\n   */\n  async sleep(delaySeconds) {\n    const delayMilliseconds = delaySeconds * 1000;\n    return new Promise(resolve => setTimeout(resolve, delayMilliseconds)); // browser or node\n  }\n  /**\n   * To execute the middleware with retries\n   * @param url - The request url\n   * @param fetchRequestInit - The request options\n   * @param retryAttempts - The current attempt count\n   * @param currentOptions - The current request options for the retry handler.\n   * @param requestOptions - The retry middleware options instance\n   * @param tracerName - The name to use for the tracer\n   * @returns A Promise that resolves to nothing\n   */\n  async executeWithRetry(url, fetchRequestInit, retryAttempts, currentOptions, requestOptions, tracerName) {\n    var _a;\n    const response = await ((_a = this.next) === null || _a === void 0 ? void 0 : _a.execute(url, fetchRequestInit, requestOptions));\n    if (!response) {\n      throw new Error(\"Response is undefined\");\n    }\n    if (retryAttempts < currentOptions.maxRetries && this.isRetry(response) && this.isBuffered(fetchRequestInit) && currentOptions.shouldRetry(currentOptions.delay, retryAttempts, url, fetchRequestInit, response)) {\n      ++retryAttempts;\n      setRequestHeader(fetchRequestInit, RetryHandler.RETRY_ATTEMPT_HEADER, retryAttempts.toString());\n      let delay = null;\n      if (response) {\n        delay = this.getDelay(response, retryAttempts, currentOptions.delay);\n        await this.sleep(delay);\n      }\n      if (tracerName) {\n        return await trace.getTracer(tracerName).startActiveSpan(`retryHandler - attempt ${retryAttempts}`, span => {\n          try {\n            span.setAttribute(\"http.request.resend_count\", retryAttempts);\n            if (delay) {\n              span.setAttribute(\"http.request.resend_delay\", delay);\n            }\n            span.setAttribute(\"http.response.status_code\", response.status);\n            return this.executeWithRetry(url, fetchRequestInit, retryAttempts, currentOptions, requestOptions);\n          } finally {\n            span.end();\n          }\n        });\n      }\n      return await this.executeWithRetry(url, fetchRequestInit, retryAttempts, currentOptions, requestOptions);\n    } else {\n      return response;\n    }\n  }\n  /**\n   * To execute the current middleware\n   * @param url - The request url\n   * @param requestInit - The request options\n   * @param requestOptions - The request options\n   * @returns A Promise that resolves to nothing\n   */\n  execute(url, requestInit, requestOptions) {\n    const retryAttempts = 0;\n    let currentOptions = this.options;\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions[RetryHandlerOptionKey]) {\n      currentOptions = requestOptions[RetryHandlerOptionKey];\n    }\n    const obsOptions = getObservabilityOptionsFromRequest(requestOptions);\n    if (obsOptions) {\n      return trace.getTracer(obsOptions.getTracerInstrumentationName()).startActiveSpan(\"retryHandler - execute\", span => {\n        try {\n          span.setAttribute(\"com.microsoft.kiota.handler.retry.enable\", true);\n          return this.executeWithRetry(url, requestInit, retryAttempts, currentOptions, requestOptions, obsOptions.getTracerInstrumentationName());\n        } finally {\n          span.end();\n        }\n      });\n    }\n    return this.executeWithRetry(url, requestInit, retryAttempts, currentOptions, requestOptions);\n  }\n}\n/**\n * A list of status codes that needs to be retried\n */\nRetryHandler.RETRY_STATUS_CODES = new Set([429,\n// Too many requests\n503,\n// Service unavailable\n504 // Gateway timeout\n]);\n/**\n * A member holding the name of retry attempt header\n */\nRetryHandler.RETRY_ATTEMPT_HEADER = \"Retry-Attempt\";\n/**\n * A member holding the name of retry after header\n */\nRetryHandler.RETRY_AFTER_HEADER = \"Retry-After\";\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n// x-release-please-start-version\nexport const libraryVersion = \"1.0.0-preview.24\";\n// x-release-please-end\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { libraryVersion } from \"./version.js\";\nexport const UserAgentHandlerOptionsKey = \"UserAgentHandlerOptionKey\";\n/**\n * Represents the options for the UserAgentHandler.\n */\nexport class UserAgentHandlerOptions {\n  getKey() {\n    return UserAgentHandlerOptionsKey;\n  }\n  /**\n   *\n   * To create an instance of UserAgentHandlerOptions\n   * @param [options] - The options for the UserAgentHandler\n   * @example\tconst options = new UserAgentHandlerOptions({ enable: false });\n   */\n  constructor(options = {}) {\n    var _a, _b, _c;\n    this.enable = (_a = options.enable) !== null && _a !== void 0 ? _a : true;\n    this.productName = (_b = options.productName) !== null && _b !== void 0 ? _b : \"kiota-typescript\";\n    this.productVersion = (_c = options.productVersion) !== null && _c !== void 0 ? _c : libraryVersion;\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { trace } from \"@opentelemetry/api\";\nimport { getObservabilityOptionsFromRequest } from \"../observabilityOptions.js\";\nimport { appendRequestHeader, getRequestHeader } from \"../utils/headersUtil.js\";\nimport { UserAgentHandlerOptions, UserAgentHandlerOptionsKey } from \"./options/userAgentHandlerOptions.js\";\nconst USER_AGENT_HEADER_KEY = \"User-Agent\";\nexport class UserAgentHandler {\n  /**\n   * To create an instance of UserAgentHandler\n   * @param _options - The options for the middleware\n   */\n  constructor(_options = new UserAgentHandlerOptions()) {\n    this._options = _options;\n  }\n  /** @inheritdoc */\n  execute(url, requestInit, requestOptions) {\n    const obsOptions = getObservabilityOptionsFromRequest(requestOptions);\n    if (obsOptions) {\n      return trace.getTracer(obsOptions.getTracerInstrumentationName()).startActiveSpan(\"userAgentHandler - execute\", span => {\n        try {\n          span.setAttribute(\"com.microsoft.kiota.handler.useragent.enable\", true);\n          return this.addValue(url, requestInit, requestOptions);\n        } finally {\n          span.end();\n        }\n      });\n    } else {\n      return this.addValue(url, requestInit, requestOptions);\n    }\n  }\n  async addValue(url, requestInit, requestOptions) {\n    var _a;\n    let currentOptions = this._options;\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions[UserAgentHandlerOptionsKey]) {\n      currentOptions = requestOptions[UserAgentHandlerOptionsKey];\n    }\n    if (currentOptions.enable) {\n      const additionalValue = `${currentOptions.productName}/${currentOptions.productVersion}`;\n      const currentValue = getRequestHeader(requestInit, USER_AGENT_HEADER_KEY);\n      if (!(currentValue === null || currentValue === void 0 ? void 0 : currentValue.includes(additionalValue))) {\n        appendRequestHeader(requestInit, USER_AGENT_HEADER_KEY, additionalValue, \" \");\n      }\n    }\n    const response = await ((_a = this.next) === null || _a === void 0 ? void 0 : _a.execute(url, requestInit, requestOptions));\n    if (!response) throw new Error(\"No response returned by the next middleware\");\n    return response;\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * Key for the url replace handler options.\n */\nexport const UrlReplaceHandlerOptionsKey = \"UrlReplaceHandlerOptionsKey\";\n/**\n * Options for the url replace handler.\n */\nexport class UrlReplaceHandlerOptions {\n  /**\n   * Create a new instance of the UrlReplaceHandlerOptions class\n   * @param config the configuration to apply to the url replace handler options.\n   */\n  constructor(config) {\n    var _a, _b;\n    if (config) {\n      this._urlReplacements = (_a = config.urlReplacements) !== null && _a !== void 0 ? _a : {};\n      this._enabled = (_b = config.enabled) !== null && _b !== void 0 ? _b : true;\n    } else {\n      this._urlReplacements = {};\n      this._enabled = true;\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  getKey() {\n    return UrlReplaceHandlerOptionsKey;\n  }\n  /**\n   * Returns whether the url replace handler is enabled or not.\n   * @returns whether the url replace handler is enabled or not.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  /**\n   * Returns the url replacements combinations.\n   * @returns the url replacements combinations.\n   */\n  get urlReplacements() {\n    return this._urlReplacements;\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { trace } from \"@opentelemetry/api\";\nimport { getObservabilityOptionsFromRequest } from \"../observabilityOptions.js\";\nimport { UrlReplaceHandlerOptions, UrlReplaceHandlerOptionsKey } from \"./options/urlReplaceHandlerOptions.js\";\n/**\n * Replaces url placeholders with values from the request option.\n */\nexport class UrlReplaceHandler {\n  /**\n   *\n   * Creates a new instance of the UrlReplaceHandler class\n   * @param handlerOptions The options for the url replace handler.\n   * @returns An instance of the UrlReplaceHandler class\n   */\n  constructor(handlerOptions = new UrlReplaceHandlerOptions()) {\n    this.handlerOptions = handlerOptions;\n    if (!handlerOptions) {\n      throw new Error(\"handlerOptions cannot be undefined\");\n    }\n  }\n  /**\n   * @inheritdoc\n   */\n  execute(url, requestInit, requestOptions) {\n    let currentOptions = this.handlerOptions;\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions[UrlReplaceHandlerOptionsKey]) {\n      currentOptions = requestOptions[UrlReplaceHandlerOptionsKey];\n    }\n    const obsOptions = getObservabilityOptionsFromRequest(requestOptions);\n    if (obsOptions) {\n      return trace.getTracer(obsOptions.getTracerInstrumentationName()).startActiveSpan(\"urlReplaceHandler - execute\", span => {\n        try {\n          span.setAttribute(\"com.microsoft.kiota.handler.urlReplace.enable\", currentOptions.enabled);\n          return this.replaceTokensInUrl(currentOptions, url, requestInit, requestOptions);\n        } finally {\n          span.end();\n        }\n      });\n    }\n    return this.replaceTokensInUrl(currentOptions, url, requestInit, requestOptions);\n  }\n  replaceTokensInUrl(options, url, requestInit, requestOptions) {\n    var _a;\n    if (options.enabled) {\n      Object.keys(options.urlReplacements).forEach(replacementKey => {\n        url = url.replace(replacementKey, options.urlReplacements[replacementKey]);\n      });\n    }\n    const response = (_a = this.next) === null || _a === void 0 ? void 0 : _a.execute(url, requestInit, requestOptions);\n    if (!response) {\n      throw new Error(\"Response is undefined\");\n    }\n    return response;\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nexport const ChaosHandlerOptionsKey = \"ChaosHandlerOptionsKey\";\n", "export const TelemetryHandlerOptionsKey = \"TelemetryHandlerOptionsKey\";\nexport class TelemetryHandler {\n  constructor(telemetryHandlerOptions) {\n    this.telemetryHandlerOptions = telemetryHandlerOptions;\n  }\n  execute(url, requestInit, requestOptions) {\n    var _a;\n    if ((_a = this.telemetryHandlerOptions) === null || _a === void 0 ? void 0 : _a.telemetryConfigurator) {\n      this.telemetryHandlerOptions.telemetryConfigurator(url, requestInit, requestOptions, this.telemetryHandlerOptions.telemetryInformation);\n    } else if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions[TelemetryHandlerOptionsKey]) {\n      requestOptions[TelemetryHandlerOptionsKey].telemetryConfigurator(url, requestInit, requestOptions);\n    }\n    if (!this.next) {\n      throw new Error(\"Please set the next middleware to continue the request\");\n    }\n    return this.next.execute(url, requestInit, requestOptions);\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { CustomFetchHandler } from \"./customFetchHandler.js\";\nimport { HeadersInspectionHandler } from \"./headersInspectionHandler.js\";\nimport { ParametersNameDecodingHandler } from \"./parametersNameDecodingHandler.js\";\nimport { RedirectHandler } from \"./redirectHandler.js\";\nimport { RetryHandler } from \"./retryHandler.js\";\nimport { UserAgentHandler } from \"./userAgentHandler.js\";\nimport { CompressionHandler } from \"./compressionHandler.js\";\nimport { UrlReplaceHandler } from \"./urlReplaceHandler.js\";\n/**\n *\n * Class containing function(s) related to the middleware pipelines.\n */\nexport class MiddlewareFactory {\n  /**\n   * @param customFetch - The custom fetch implementation\n   * Returns the default middleware chain an array with the  middleware handlers\n   * @returns an array of the middleware handlers of the default middleware chain\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  static getDefaultMiddlewares(customFetch = (...args) => fetch(...args)) {\n    return [new RetryHandler(), new RedirectHandler(), new ParametersNameDecodingHandler(), new UserAgentHandler(), new HeadersInspectionHandler(), new UrlReplaceHandler(), new CustomFetchHandler(customFetch)];\n  }\n  /**\n   * @param customFetch - The custom fetch implementation\n   * Returns the default middleware chain + performance middleware\n   * @returns an array of the middleware handlers of the default + performance middleware chain\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  static getPerformanceMiddlewares(customFetch = (...args) => fetch(...args)) {\n    const middlewares = MiddlewareFactory.getDefaultMiddlewares(customFetch);\n    middlewares.splice(middlewares.length - 3, 0, new CompressionHandler()); // insert CompressionHandler before HeadersInspectionHandler\n    return middlewares;\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { MiddlewareFactory } from \"./index.js\";\nimport { HttpClient } from \"./httpClient.js\";\nimport { AuthorizationHandler } from \"./middlewares/authorizationHandler.js\";\n/**\n *\n * Class containing function(s) related to the middleware pipelines.\n */\nexport class KiotaClientFactory {\n  /**\n   * Returns an instance of HttpClient with the provided middlewares and custom fetch implementation both parameters are optional.\n   * if not provided, the default fetch implementation and middlewares will be used.\n   * @param customFetch - a Fetch API implementation\n   * @param middlewares - an aray of Middleware handlers\n   * If middlewares param is undefined, the httpClient instance will use the default array of middlewares.\n   * Set middlewares to `null` if you do not wish to use middlewares.\n   * If custom fetch is undefined, the httpClient instance uses the `DefaultFetchHandler`\n   * @param authenticationProvider - an optional instance of BaseBearerTokenAuthenticationProvider to be used for authentication\n   * @returns a HttpClient instance\n   * @example\n   * ```Typescript\n   * // Example usage of KiotaClientFactory.create method with both customFetch and middlewares parameters provided\n   *  KiotaClientFactory.create(customFetch, [middleware1, middleware2]);\n   * ```\n   * @example\n   * ```Typescript\n   * // Example usage of KiotaClientFactory.create method with only customFetch parameter provided\n   * KiotaClientFactory.create(customFetch);\n   * ```\n   * @example\n   * ```Typescript\n   * // Example usage of KiotaClientFactory.create method with only middlewares parameter provided\n   * KiotaClientFactory.create(undefined, [middleware1, middleware2]);\n   * ```\n   * @example\n   * ```Typescript\n   * // Example usage of KiotaClientFactory.create method with no parameters provided\n   * KiotaClientFactory.create();\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  static create(customFetch = (...args) => fetch(...args), middlewares, authenticationProvider) {\n    const middleware = middlewares || MiddlewareFactory.getDefaultMiddlewares(customFetch);\n    if (authenticationProvider) {\n      middleware.unshift(new AuthorizationHandler(authenticationProvider));\n    }\n    return new HttpClient(customFetch, ...middleware);\n  }\n}\n"],
  "mappings": "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",
  "names": ["ChaosStrategy"]
}
