{
  "version": 3,
  "sources": ["../../../../../../node_modules/@microsoft/kiota-serialization-json/dist/es/src/jsonParseNode.js", "../../../../../../node_modules/@microsoft/kiota-serialization-json/dist/es/src/jsonSerializationWriter.js", "../../../../../../node_modules/@microsoft/kiota-serialization-json/dist/es/src/browser/jsonParseNodeFactory.js", "../../../../../../node_modules/@microsoft/kiota-serialization-json/dist/es/src/jsonSerializationWriterFactory.js"],
  "sourcesContent": ["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { DateOnly, Duration, TimeOnly, createBackedModelProxyHandler, createUntypedArray, createUntypedBoolean, createUntypedNodeFromDiscriminatorValue, createUntypedNull, createUntypedNumber, createUntypedObject, createUntypedString, inNodeEnv, isBackingStoreEnabled, isUntypedNode, parseGuidString, getEnumValueFromStringValue } from \"@microsoft/kiota-abstractions\";\nexport class JsonParseNode {\n  constructor(_jsonNode) {\n    this._jsonNode = _jsonNode;\n    this.getStringValue = () => typeof this._jsonNode === \"string\" ? this._jsonNode : undefined;\n    this.getChildNode = identifier => this._jsonNode && typeof this._jsonNode === \"object\" && this._jsonNode[identifier] !== undefined ? new JsonParseNode(this._jsonNode[identifier]) : undefined;\n    this.getBooleanValue = () => typeof this._jsonNode === \"boolean\" ? this._jsonNode : undefined;\n    this.getNumberValue = () => typeof this._jsonNode === \"number\" ? this._jsonNode : undefined;\n    this.getGuidValue = () => parseGuidString(this.getStringValue());\n    this.getDateValue = () => this._jsonNode ? new Date(this._jsonNode) : undefined;\n    this.getDateOnlyValue = () => DateOnly.parse(this.getStringValue());\n    this.getTimeOnlyValue = () => TimeOnly.parse(this.getStringValue());\n    this.getDurationValue = () => Duration.parse(this.getStringValue());\n    this.getCollectionOfPrimitiveValues = () => {\n      if (!Array.isArray(this._jsonNode)) {\n        return undefined;\n      }\n      return this._jsonNode.map(x => {\n        const currentParseNode = new JsonParseNode(x);\n        const typeOfX = typeof x;\n        if (typeOfX === \"boolean\") {\n          return currentParseNode.getBooleanValue();\n        } else if (typeOfX === \"string\") {\n          return currentParseNode.getStringValue();\n        } else if (typeOfX === \"number\") {\n          return currentParseNode.getNumberValue();\n        } else if (x instanceof Date) {\n          return currentParseNode.getDateValue();\n        } else if (x instanceof DateOnly) {\n          return currentParseNode.getDateValue();\n        } else if (x instanceof TimeOnly) {\n          return currentParseNode.getDateValue();\n        } else if (x instanceof Duration) {\n          return currentParseNode.getDateValue();\n        } else {\n          throw new Error(`encountered an unknown type during deserialization ${typeof x}`);\n        }\n      });\n    };\n    this.getCollectionOfObjectValues = method => {\n      if (!Array.isArray(this._jsonNode)) {\n        return undefined;\n      }\n      return this._jsonNode ? this._jsonNode.map(x => new JsonParseNode(x)).map(x => x.getObjectValue(method)) : undefined;\n    };\n    this.getObjectValue = parsableFactory => {\n      const temp = {};\n      if (isUntypedNode(parsableFactory(this)(temp))) {\n        const valueType = typeof this._jsonNode;\n        let value = temp;\n        if (valueType === \"boolean\") {\n          value = createUntypedBoolean(this._jsonNode);\n        } else if (valueType === \"string\") {\n          value = createUntypedString(this._jsonNode);\n        } else if (valueType === \"number\") {\n          value = createUntypedNumber(this._jsonNode);\n        } else if (Array.isArray(this._jsonNode)) {\n          const nodes = [];\n          this._jsonNode.forEach(x => {\n            nodes.push(new JsonParseNode(x).getObjectValue(createUntypedNodeFromDiscriminatorValue));\n          });\n          value = createUntypedArray(nodes);\n        } else if (this._jsonNode && valueType === \"object\") {\n          const properties = {};\n          Object.entries(this._jsonNode).forEach(([k, v]) => {\n            properties[k] = new JsonParseNode(v).getObjectValue(createUntypedNodeFromDiscriminatorValue);\n          });\n          value = createUntypedObject(properties);\n        } else if (!this._jsonNode) {\n          value = createUntypedNull();\n        }\n        return value;\n      }\n      const enableBackingStore = isBackingStoreEnabled(parsableFactory(this)(temp));\n      const objectValue = enableBackingStore ? new Proxy(temp, createBackedModelProxyHandler()) : temp;\n      if (this.onBeforeAssignFieldValues) {\n        this.onBeforeAssignFieldValues(objectValue);\n      }\n      this.assignFieldValues(objectValue, parsableFactory);\n      if (this.onAfterAssignFieldValues) {\n        this.onAfterAssignFieldValues(objectValue);\n      }\n      return objectValue;\n    };\n    this.assignFieldValues = (model, parsableFactory) => {\n      const fields = parsableFactory(this)(model);\n      if (!this._jsonNode) return;\n      Object.entries(this._jsonNode).forEach(([k, v]) => {\n        const deserializer = fields[k];\n        if (deserializer) {\n          deserializer(new JsonParseNode(v));\n        } else {\n          // additional properties\n          model[k] = v;\n        }\n      });\n    };\n    this.getCollectionOfEnumValues = type => {\n      if (Array.isArray(this._jsonNode)) {\n        return this._jsonNode.map(x => {\n          const node = new JsonParseNode(x);\n          return node.getEnumValue(type);\n        }).filter(Boolean);\n      }\n      return [];\n    };\n    this.getEnumValue = type => {\n      const rawValue = this.getStringValue();\n      if (!rawValue) {\n        return undefined;\n      }\n      return getEnumValueFromStringValue(rawValue, type);\n    };\n  }\n  getByteArrayValue() {\n    const strValue = this.getStringValue();\n    if (strValue && strValue.length > 0) {\n      return inNodeEnv() ? Buffer.from(strValue, \"base64\").buffer : new TextEncoder().encode(strValue);\n    }\n    return undefined;\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/* eslint-disable @typescript-eslint/no-unused-expressions */\nimport { DateOnly, Duration, isUntypedNode, TimeOnly, isUntypedBoolean, isUntypedString, isUntypedNull, isUntypedNumber, isUntypedObject, isUntypedArray, inNodeEnv } from \"@microsoft/kiota-abstractions\";\nexport class JsonSerializationWriter {\n  constructor() {\n    this.writer = [];\n    this.shouldWriteValueOrNull = (key, value) => {\n      if (value === null) {\n        this.writeNullValue(key);\n        return false;\n      }\n      return true;\n    };\n    this.writeStringValue = (key, value) => {\n      if (value === undefined) {\n        return;\n      }\n      if (this.shouldWriteValueOrNull(key, value)) {\n        key && this.writePropertyName(key);\n        this.writer.push(JSON.stringify(value));\n        key && this.writer.push(JsonSerializationWriter.propertySeparator);\n      }\n    };\n    this.writePropertyName = key => {\n      this.writer.push(`\"${key}\":`);\n    };\n    this.writeBooleanValue = (key, value) => {\n      if (value === undefined) {\n        return;\n      }\n      if (this.shouldWriteValueOrNull(key, value)) {\n        key && this.writePropertyName(key);\n        this.writer.push(`${value}`);\n        key && this.writer.push(JsonSerializationWriter.propertySeparator);\n      }\n    };\n    this.writeNumberValue = (key, value) => {\n      if (value === undefined) {\n        return;\n      }\n      if (this.shouldWriteValueOrNull(key, value)) {\n        key && this.writePropertyName(key);\n        this.writer.push(`${value}`);\n        key && this.writer.push(JsonSerializationWriter.propertySeparator);\n      }\n    };\n    this.writeGuidValue = (key, value) => {\n      if (value === undefined) {\n        return;\n      }\n      if (this.shouldWriteValueOrNull(key, value)) {\n        key && this.writePropertyName(key);\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.writer.push(`\"${value}\"`);\n        key && this.writer.push(JsonSerializationWriter.propertySeparator);\n      }\n    };\n    this.writeDateValue = (key, value) => this.writeStringValue(key, value === null ? null : value === null || value === void 0 ? void 0 : value.toISOString());\n    this.writeDateOnlyValue = (key, value) => this.writeStringValue(key, value === null ? null : value === null || value === void 0 ? void 0 : value.toString());\n    this.writeTimeOnlyValue = (key, value) => this.writeStringValue(key, value === null ? null : value === null || value === void 0 ? void 0 : value.toString());\n    this.writeDurationValue = (key, value) => this.writeStringValue(key, value === null ? null : value === null || value === void 0 ? void 0 : value.toString());\n    this.writeNullValue = key => {\n      key && this.writePropertyName(key);\n      this.writer.push(`null`);\n      key && this.writer.push(JsonSerializationWriter.propertySeparator);\n    };\n    this.writeCollectionOfPrimitiveValues = (key, values) => {\n      if (!this.shouldWriteValueOrNull(key, values)) {\n        return;\n      }\n      if (values) {\n        key && this.writePropertyName(key);\n        this.startArray();\n        values.forEach((v, idx) => {\n          this.writeAnyValue(undefined, v);\n          idx + 1 < values.length && this.writer.push(JsonSerializationWriter.propertySeparator);\n        });\n        this.endArray();\n        key && this.writer.push(JsonSerializationWriter.propertySeparator);\n      }\n    };\n    this.writeCollectionOfObjectValues = (key, values, serializerMethod) => {\n      if (!this.shouldWriteValueOrNull(key, values)) {\n        return;\n      }\n      if (values) {\n        key && this.writePropertyName(key);\n        this.startArray();\n        values.forEach(v => {\n          this.writeObjectValue(undefined, v, serializerMethod);\n          this.writer.push(JsonSerializationWriter.propertySeparator);\n        });\n        if (values.length > 0) {\n          // removing the last separator\n          this.writer.pop();\n        }\n        this.endArray();\n        key && this.writer.push(JsonSerializationWriter.propertySeparator);\n      }\n    };\n    this.startObject = () => {\n      this.writer.push(`{`);\n    };\n    this.endObject = () => {\n      this.writer.push(`}`);\n    };\n    this.startArray = () => {\n      this.writer.push(`[`);\n    };\n    this.endArray = () => {\n      this.writer.push(`]`);\n    };\n    this.removeLastSeparator = () => {\n      if (this.writer.length > 0 && this.writer[this.writer.length - 1] === JsonSerializationWriter.propertySeparator) {\n        this.writer.pop();\n      }\n    };\n    this.writeEnumValue = (key, ...values) => {\n      if (values.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const rawValues = values.filter(x => x !== undefined).map(x => `${x}`);\n        if (rawValues.length > 0) {\n          this.writeStringValue(key, rawValues.reduce((x, y) => `${x}, ${y}`));\n        }\n      }\n    };\n    this.writeCollectionOfEnumValues = (key, values) => {\n      if (values && values.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const rawValues = values.filter(x => x !== undefined).map(x => `${x}`);\n        if (rawValues.length === 0) {\n          return;\n        }\n        key && this.writePropertyName(key);\n        this.writer.push(JSON.stringify(rawValues));\n        key && this.writer.push(JsonSerializationWriter.propertySeparator);\n      }\n    };\n    this.getSerializedContent = () => {\n      return this.convertStringToArrayBuffer(this.writer.join(``));\n    };\n    this.convertStringToArrayBuffer = str => {\n      const encoder = new TextEncoder();\n      const encodedString = encoder.encode(str);\n      return encodedString.buffer;\n    };\n    this.writeAdditionalData = additionalData => {\n      // !value will fail to serialize false and null values which can be valid input\n      if (additionalData === undefined) return;\n      for (const key in additionalData) {\n        if (Object.prototype.hasOwnProperty.call(additionalData, key)) {\n          this.writeAnyValue(key, additionalData[key]);\n        }\n      }\n    };\n    this.writeNonParsableObjectValue = (key, value) => {\n      if (key) {\n        this.writePropertyName(key);\n      }\n      this.writer.push(JSON.stringify(value), JsonSerializationWriter.propertySeparator);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    this.writeAnyValue = (key, value) => {\n      if (value === undefined) {\n        return;\n      }\n      if (!this.shouldWriteValueOrNull(key, value)) {\n        return;\n      }\n      const valueType = typeof value;\n      if (valueType === \"boolean\") {\n        this.writeBooleanValue(key, value);\n      } else if (valueType === \"string\") {\n        this.writeStringValue(key, value);\n      } else if (value instanceof Date) {\n        this.writeDateValue(key, value);\n      } else if (value instanceof DateOnly) {\n        this.writeDateOnlyValue(key, value);\n      } else if (value instanceof TimeOnly) {\n        this.writeTimeOnlyValue(key, value);\n      } else if (value instanceof Duration) {\n        this.writeDurationValue(key, value);\n      } else if (valueType === \"number\") {\n        this.writeNumberValue(key, value);\n      } else if (Array.isArray(value)) {\n        this.writeCollectionOfPrimitiveValues(key, value);\n      } else if (valueType === \"object\") {\n        this.writeNonParsableObjectValue(key, value);\n      } else {\n        throw new Error(`encountered unknown value type during serialization ${valueType}`);\n      }\n    };\n  }\n  writeByteArrayValue(key, value) {\n    if (!value) {\n      throw new Error(\"value cannot be undefined\");\n    }\n    const b64 = inNodeEnv() ? Buffer.from(value).toString(\"base64\") : btoa(new TextDecoder().decode(value));\n    this.writeStringValue(key, b64);\n  }\n  writeObjectValue(key, value, serializerMethod) {\n    if (value === undefined) {\n      return;\n    }\n    if (!this.shouldWriteValueOrNull(key, value)) {\n      return;\n    }\n    if (isUntypedNode(value)) {\n      const untypedNode = value;\n      if (isUntypedBoolean(untypedNode)) {\n        this.writeBooleanValue(key, untypedNode.getValue());\n      } else if (isUntypedString(untypedNode)) {\n        this.writeStringValue(key, untypedNode.getValue());\n      } else if (isUntypedNull(untypedNode)) {\n        this.writeNullValue(key);\n      } else if (isUntypedNumber(untypedNode)) {\n        this.writeNumberValue(key, untypedNode.getValue());\n      } else if (isUntypedObject(untypedNode)) {\n        const objectValue = untypedNode.getValue();\n        if (objectValue === undefined) return;\n        if (key) this.writePropertyName(key);\n        this.startObject();\n        for (const vKey in objectValue) {\n          if (Object.prototype.hasOwnProperty.call(objectValue, vKey)) {\n            this.writeObjectValue(vKey, objectValue[vKey], serializerMethod);\n          }\n        }\n        this.removeLastSeparator();\n        this.endObject();\n        if (key) this.writer.push(JsonSerializationWriter.propertySeparator);\n      } else if (isUntypedArray(untypedNode)) {\n        if (key) {\n          this.writePropertyName(key);\n        }\n        const arrValue = untypedNode.getValue();\n        this.startArray();\n        arrValue.forEach((v, idx) => {\n          this.writeObjectValue(undefined, v, serializerMethod);\n          idx + 1 < arrValue.length && this.writer.push(JsonSerializationWriter.propertySeparator);\n        });\n        this.removeLastSeparator();\n        this.endArray();\n        key && this.writer.push(JsonSerializationWriter.propertySeparator);\n      } else {\n        this.writeAnyValue(key, untypedNode.getValue());\n      }\n      return; // nothing to do here, the value has been written\n    }\n    if (key) this.writePropertyName(key);\n    this.onBeforeObjectSerialization && this.onBeforeObjectSerialization(value);\n    this.startObject();\n    this.onStartObjectSerialization && this.onStartObjectSerialization(value, this);\n    serializerMethod && serializerMethod(this, value);\n    this.onAfterObjectSerialization && this.onAfterObjectSerialization(value);\n    this.removeLastSeparator();\n    this.endObject();\n    if (key) this.writer.push(JsonSerializationWriter.propertySeparator);\n  }\n}\nJsonSerializationWriter.propertySeparator = `,`;\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { JsonParseNode } from \"./../jsonParseNode.js\";\nexport class JsonParseNodeFactory {\n  getValidContentType() {\n    return \"application/json\";\n  }\n  getRootParseNode(contentType, content) {\n    if (!content) {\n      throw new Error(\"content cannot be undefined of empty\");\n    } else if (!contentType) {\n      throw new Error(\"content type cannot be undefined or empty\");\n    } else if (this.getValidContentType() !== contentType) {\n      throw new Error(`expected a ${this.getValidContentType()} content type`);\n    }\n    return new JsonParseNode(this.convertArrayBufferToJson(content));\n  }\n  convertArrayBufferToJson(content) {\n    const decoder = new TextDecoder();\n    const contentAsStr = decoder.decode(content);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return JSON.parse(contentAsStr);\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { JsonSerializationWriter } from \"./jsonSerializationWriter.js\";\nexport class JsonSerializationWriterFactory {\n  getValidContentType() {\n    return \"application/json\";\n  }\n  getSerializationWriter(contentType) {\n    if (!contentType) {\n      throw new Error(\"content type cannot be undefined or empty\");\n    } else if (this.getValidContentType() !== contentType) {\n      throw new Error(`expected a ${this.getValidContentType()} content type`);\n    }\n    return new JsonSerializationWriter();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
