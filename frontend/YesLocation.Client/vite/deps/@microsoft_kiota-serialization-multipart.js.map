{
  "version": 3,
  "sources": ["../../../../../../node_modules/@microsoft/kiota-serialization-multipart/dist/es/src/multipartSerializationWriter.js", "../../../../../../node_modules/@microsoft/kiota-serialization-multipart/dist/es/src/multipartSerializationWriterFactory.js"],
  "sourcesContent": ["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/* eslint-disable @typescript-eslint/no-unused-expressions */\nimport { MultipartBody } from \"@microsoft/kiota-abstractions\";\n/** Serialization writer for multipart/form-data */\nexport class MultipartSerializationWriter {\n  constructor() {\n    this.writer = new ArrayBuffer(0);\n    this.writeStringValue = (key, value) => {\n      if (key) {\n        this.writeRawStringValue(key);\n      }\n      if (value) {\n        if (key) {\n          this.writeRawStringValue(\": \");\n        }\n        this.writeRawStringValue(value);\n      }\n    };\n    this.writeRawStringValue = value => {\n      if (value) {\n        this.writeByteArrayValue(undefined, new TextEncoder().encode(value).buffer);\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.writeBooleanValue = (key, value) => {\n      throw new Error(`serialization of boolean values is not supported with multipart`);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.writeNumberValue = (key, value) => {\n      throw new Error(`serialization of number values is not supported with multipart`);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.writeGuidValue = (key, value) => {\n      throw new Error(`serialization of guid values is not supported with multipart`);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.writeDateValue = (key, value) => {\n      throw new Error(`serialization of date values is not supported with multipart`);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.writeDateOnlyValue = (key, value) => {\n      throw new Error(`serialization of date only values is not supported with multipart`);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.writeTimeOnlyValue = (key, value) => {\n      throw new Error(`serialization of time only values is not supported with multipart`);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.writeDurationValue = (key, value) => {\n      throw new Error(`serialization of duration values is not supported with multipart`);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.writeNullValue = key => {\n      throw new Error(`serialization of null values is not supported with multipart`);\n    };\n    this.writeCollectionOfPrimitiveValues = (_key, _values) => {\n      throw new Error(`serialization of collections is not supported with multipart`);\n    };\n    this.writeCollectionOfObjectValues = (_key, _values) => {\n      throw new Error(`serialization of collections is not supported with multipart`);\n    };\n    this.writeObjectValue = (key, value, serializerMethod) => {\n      if (!value) {\n        throw new Error(`value cannot be undefined`);\n      }\n      if (!(value instanceof MultipartBody)) {\n        throw new Error(`expected MultipartBody instance`);\n      }\n      if (!serializerMethod) {\n        throw new Error(`serializer method cannot be undefined`);\n      }\n      this.onBeforeObjectSerialization && this.onBeforeObjectSerialization(value);\n      this.onStartObjectSerialization && this.onStartObjectSerialization(value, this);\n      serializerMethod(this, value);\n      this.onAfterObjectSerialization && this.onAfterObjectSerialization(value);\n    };\n    this.writeEnumValue = (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    key,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ...values) => {\n      throw new Error(`serialization of enum values is not supported with multipart`);\n    };\n    this.writeCollectionOfEnumValues = (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    key,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    values) => {\n      throw new Error(`serialization of collection of enum values is not supported with multipart`);\n    };\n    this.getSerializedContent = () => {\n      return this.writer;\n    };\n    this.writeAdditionalData = (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    additionalData) => {\n      throw new Error(`serialization of additional data is not supported with multipart`);\n    };\n  }\n  writeByteArrayValue(key, value) {\n    if (!value) {\n      throw new Error(\"value cannot be undefined\");\n    }\n    const previousValue = this.writer;\n    this.writer = new ArrayBuffer(previousValue.byteLength + value.byteLength);\n    const pipe = new Uint8Array(this.writer);\n    pipe.set(new Uint8Array(previousValue), 0);\n    pipe.set(new Uint8Array(value), previousValue.byteLength);\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { MultipartSerializationWriter } from \"./multipartSerializationWriter.js\";\nexport class MultipartSerializationWriterFactory {\n  getValidContentType() {\n    return \"multipart/form-data\";\n  }\n  getSerializationWriter(contentType) {\n    if (!contentType) {\n      throw new Error(\"content type cannot be undefined or empty\");\n    } else if (this.getValidContentType() !== contentType) {\n      throw new Error(`expected a ${this.getValidContentType()} content type`);\n    }\n    return new MultipartSerializationWriter();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
