{
  "version": 3,
  "sources": ["../../../../../../node_modules/@microsoft/kiota-serialization-form/dist/es/src/formParseNode.js", "../../../../../../node_modules/@microsoft/kiota-serialization-form/dist/es/src/formSerializationWriter.js", "../../../../../../node_modules/@microsoft/kiota-serialization-form/dist/es/src/browser/formParseNodeFactory.js", "../../../../../../node_modules/@microsoft/kiota-serialization-form/dist/es/src/formSerializationWriterFactory.js"],
  "sourcesContent": ["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { createBackedModelProxyHandler, DateOnly, Duration, parseGuidString, TimeOnly, isBackingStoreEnabled, getEnumValueFromStringValue } from \"@microsoft/kiota-abstractions\";\nexport class FormParseNode {\n  /**\n   *  Creates a new instance of FormParseNode\n   * @param _rawString the raw string to parse\n   */\n  constructor(_rawString) {\n    this._rawString = _rawString;\n    this._fields = {};\n    this.normalizeKey = key => decodeURIComponent(key).trim();\n    this.getStringValue = () => decodeURIComponent(this._rawString);\n    this.getChildNode = identifier => {\n      if (this._fields[identifier]) {\n        return new FormParseNode(this._fields[identifier]);\n      }\n      return undefined;\n    };\n    this.getBooleanValue = () => {\n      var _a;\n      const value = (_a = this.getStringValue()) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n      if (value === \"true\" || value === \"1\") {\n        return true;\n      } else if (value === \"false\" || value === \"0\") {\n        return false;\n      }\n      return undefined;\n    };\n    this.getNumberValue = () => parseFloat(this.getStringValue());\n    this.getGuidValue = () => parseGuidString(this.getStringValue());\n    this.getDateValue = () => new Date(Date.parse(this.getStringValue()));\n    this.getDateOnlyValue = () => DateOnly.parse(this.getStringValue());\n    this.getTimeOnlyValue = () => TimeOnly.parse(this.getStringValue());\n    this.getDurationValue = () => Duration.parse(this.getStringValue());\n    this.getCollectionOfPrimitiveValues = () => {\n      return this._rawString.split(\",\").map(x => {\n        const currentParseNode = new FormParseNode(x);\n        const typeOfX = typeof x;\n        if (typeOfX === \"boolean\") {\n          return currentParseNode.getBooleanValue();\n        } else if (typeOfX === \"string\") {\n          return currentParseNode.getStringValue();\n        } else if (typeOfX === \"number\") {\n          return currentParseNode.getNumberValue();\n        } else if (x instanceof Date) {\n          return currentParseNode.getDateValue();\n        } else if (x instanceof DateOnly) {\n          return currentParseNode.getDateValue();\n        } else if (x instanceof TimeOnly) {\n          return currentParseNode.getDateValue();\n        } else if (x instanceof Duration) {\n          return currentParseNode.getDateValue();\n        } else {\n          throw new Error(`encountered an unknown type during deserialization ${typeof x}`);\n        }\n      });\n    };\n    this.getCollectionOfObjectValues = (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    parsableFactory) => {\n      throw new Error(`serialization of collections is not supported with URI encoding`);\n    };\n    this.getObjectValue = parsableFactory => {\n      const temp = {};\n      const enableBackingStore = isBackingStoreEnabled(parsableFactory(this)(temp));\n      const value = enableBackingStore ? new Proxy(temp, createBackedModelProxyHandler()) : temp;\n      if (this.onBeforeAssignFieldValues) {\n        this.onBeforeAssignFieldValues(value);\n      }\n      this.assignFieldValues(value, parsableFactory);\n      if (this.onAfterAssignFieldValues) {\n        this.onAfterAssignFieldValues(value);\n      }\n      return value;\n    };\n    this.getCollectionOfEnumValues = type => {\n      const rawValues = this.getStringValue();\n      if (!rawValues) {\n        return [];\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      return rawValues.split(\",\").map(x => getEnumValueFromStringValue(x, type));\n    };\n    this.getEnumValue = type => {\n      const rawValue = this.getStringValue();\n      if (!rawValue) {\n        return undefined;\n      }\n      return getEnumValueFromStringValue(rawValue, type);\n    };\n    this.assignFieldValues = (model, parsableFactory) => {\n      const fields = parsableFactory(this)(model);\n      Object.entries(this._fields).filter(x => !/^null$/i.test(x[1])).forEach(([k, v]) => {\n        const deserializer = fields[k];\n        if (deserializer) {\n          deserializer(new FormParseNode(v));\n        } else {\n          model[k] = v;\n        }\n      });\n    };\n    if (!_rawString) {\n      throw new Error(\"rawString cannot be undefined\");\n    }\n    _rawString.split(\"&\").map(x => x.split(\"=\")).filter(x => x.length === 2).forEach(x => {\n      const key = this.normalizeKey(x[0]);\n      if (this._fields[key]) {\n        this._fields[key] += \",\" + x[1];\n      } else {\n        this._fields[key] = x[1];\n      }\n    });\n  }\n  getByteArrayValue() {\n    throw new Error(\"serialization of byt arrays is not supported with URI encoding\");\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/* eslint-disable @typescript-eslint/no-unused-expressions */\nimport { DateOnly, Duration, TimeOnly } from \"@microsoft/kiota-abstractions\";\nexport class FormSerializationWriter {\n  constructor() {\n    this.writer = [];\n    this.depth = -1;\n    this.writeStringValue = (key, value) => {\n      if (value === null) {\n        value = \"null\";\n      }\n      if (key && value) {\n        this.writePropertyName(key);\n        this.writer.push(`=${encodeURIComponent(value)}`);\n        this.writer.push(FormSerializationWriter.propertySeparator);\n      }\n    };\n    this.writePropertyName = key => {\n      this.writer.push(encodeURIComponent(key));\n    };\n    this.shouldWriteValueOrNull = (key, value) => {\n      if (value === null) {\n        this.writeNullValue(key);\n        return false;\n      }\n      return true;\n    };\n    this.writeBooleanValue = (key, value) => {\n      if (this.shouldWriteValueOrNull(key, value)) {\n        value !== undefined && this.writeStringValue(key, `${value}`);\n      }\n    };\n    this.writeNumberValue = (key, value) => {\n      if (this.shouldWriteValueOrNull(key, value)) {\n        value && this.writeStringValue(key, `${value}`);\n      }\n    };\n    this.writeGuidValue = (key, value) => {\n      if (this.shouldWriteValueOrNull(key, value)) {\n        value && this.writeStringValue(key, value.toString());\n      }\n    };\n    this.writeDateValue = (key, value) => {\n      if (this.shouldWriteValueOrNull(key, value)) {\n        value && this.writeStringValue(key, value.toISOString());\n      }\n    };\n    this.writeDateOnlyValue = (key, value) => {\n      if (this.shouldWriteValueOrNull(key, value)) {\n        value && this.writeStringValue(key, value.toString());\n      }\n    };\n    this.writeTimeOnlyValue = (key, value) => {\n      if (this.shouldWriteValueOrNull(key, value)) {\n        value && this.writeStringValue(key, value.toString());\n      }\n    };\n    this.writeDurationValue = (key, value) => {\n      if (this.shouldWriteValueOrNull(key, value)) {\n        value && this.writeStringValue(key, value.toString());\n      }\n    };\n    this.writeNullValue = key => {\n      key && this.writeStringValue(key, null);\n    };\n    this.writeCollectionOfPrimitiveValues = (_key, _values) => {\n      if (_key && _values) {\n        _values.forEach(val => {\n          this.writeAnyValue(_key, val);\n        });\n      }\n    };\n    this.writeCollectionOfObjectValues = (_key, _values) => {\n      throw new Error(`serialization of collections is not supported with URI encoding`);\n    };\n    this.writeObjectValue = (key, value, serializerMethod) => {\n      if (++this.depth > 0) {\n        throw new Error(`serialization of nested objects is not supported with URI encoding`);\n      }\n      if (!this.shouldWriteValueOrNull(key, value)) {\n        return;\n      }\n      if (value) {\n        if (key) {\n          this.writePropertyName(key);\n        }\n        this.onBeforeObjectSerialization && this.onBeforeObjectSerialization(value);\n        this.onStartObjectSerialization && this.onStartObjectSerialization(value, this);\n        serializerMethod(this, value);\n        this.onAfterObjectSerialization && this.onAfterObjectSerialization(value);\n        if (this.writer.length > 0 && this.writer[this.writer.length - 1] === FormSerializationWriter.propertySeparator) {\n          // removing the last separator\n          this.writer.pop();\n        }\n        key && this.writer.push(FormSerializationWriter.propertySeparator);\n      }\n    };\n    this.writeEnumValue = (key, ...values) => {\n      if (values.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const rawValues = values.filter(x => x !== undefined).map(x => `${x}`);\n        if (rawValues.length > 0) {\n          this.writeStringValue(key, rawValues.reduce((x, y) => `${x}, ${y}`));\n        }\n      }\n    };\n    this.writeCollectionOfEnumValues = (key, values) => {\n      if (key && values && values.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const rawValues = values.filter(x => x !== undefined).map(x => `${x}`);\n        if (rawValues.length > 0) {\n          this.writeCollectionOfPrimitiveValues(key, rawValues);\n        }\n      }\n    };\n    this.getSerializedContent = () => {\n      return this.convertStringToArrayBuffer(this.writer.join(``));\n    };\n    this.convertStringToArrayBuffer = str => {\n      const encoder = new TextEncoder();\n      const encodedString = encoder.encode(str);\n      return encodedString.buffer;\n    };\n    this.writeAdditionalData = additionalData => {\n      // Do not use !value here, because value can be `false`.\n      if (additionalData === undefined) return;\n      // eslint-disable-next-line guard-for-in\n      for (const key in additionalData) {\n        this.writeAnyValue(key, additionalData[key]);\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    this.writeAnyValue = (key, value) => {\n      if (value === null) {\n        return this.writeNullValue(key);\n      }\n      if (value !== undefined) {\n        const valueType = typeof value;\n        if (valueType === \"boolean\") {\n          this.writeBooleanValue(key, value);\n        } else if (valueType === \"string\") {\n          this.writeStringValue(key, value);\n        } else if (value instanceof Date) {\n          this.writeDateValue(key, value);\n        } else if (value instanceof DateOnly) {\n          this.writeDateOnlyValue(key, value);\n        } else if (value instanceof TimeOnly) {\n          this.writeTimeOnlyValue(key, value);\n        } else if (value instanceof Duration) {\n          this.writeDurationValue(key, value);\n        } else if (valueType === \"number\") {\n          this.writeNumberValue(key, value);\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-base-to-string, @typescript-eslint/restrict-template-expressions\n          throw new Error(`encountered unknown ${value} value type during serialization ${valueType} for key ${key}`);\n        }\n      }\n    };\n  }\n  writeByteArrayValue(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  key,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  value) {\n    throw new Error(\"serialization of byt arrays is not supported with URI encoding\");\n  }\n}\nFormSerializationWriter.propertySeparator = `&`;\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { FormParseNode } from \"./../formParseNode.js\";\nexport class FormParseNodeFactory {\n  getValidContentType() {\n    return \"application/x-www-form-urlencoded\";\n  }\n  getRootParseNode(contentType, content) {\n    if (!content) {\n      throw new Error(\"content cannot be undefined of empty\");\n    } else if (!contentType) {\n      throw new Error(\"content type cannot be undefined or empty\");\n    } else if (this.getValidContentType() !== contentType) {\n      throw new Error(`expected a ${this.getValidContentType()} content type`);\n    }\n    return new FormParseNode(this.convertArrayBufferToString(content));\n  }\n  convertArrayBufferToString(content) {\n    const decoder = new TextDecoder();\n    return decoder.decode(content);\n  }\n}\n", "/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { FormSerializationWriter } from \"./formSerializationWriter.js\";\nexport class FormSerializationWriterFactory {\n  getValidContentType() {\n    return \"application/x-www-form-urlencoded\";\n  }\n  getSerializationWriter(contentType) {\n    if (!contentType) {\n      throw new Error(\"content type cannot be undefined or empty\");\n    } else if (this.getValidContentType() !== contentType) {\n      throw new Error(`expected a ${this.getValidContentType()} content type`);\n    }\n    return new FormSerializationWriter();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
