/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createRoleDtoFromDiscriminatorValue, type RoleDto } from '../../../../models/index.js';
// @ts-ignore
import { type WithRoleItemRequestBuilder, WithRoleItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/User/{-id}/roles
 */
export interface RolesRequestBuilder extends BaseRequestBuilder<RolesRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.api.User.item.roles.item collection
     * @param roleId Unique identifier of the item
     * @returns {WithRoleItemRequestBuilder}
     */
     byRoleId(roleId: number) : WithRoleItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RoleDto[]>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RoleDto[] | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     post(body: number[], requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: number[], requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const RolesRequestBuilderUriTemplate = "{+baseurl}/api/User/{%2Did}/roles";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RolesRequestBuilderNavigationMetadata: Record<Exclude<keyof RolesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byRoleId: {
        requestsMetadata: WithRoleItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["roleId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RolesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RolesRequestBuilderUriTemplate,
        responseBodyContentType: "text/plain;q=0.9",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createRoleDtoFromDiscriminatorValue,
    },
    post: {
        uriTemplate: RolesRequestBuilderUriTemplate,
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestInformationContentSetMethod: "setContentFromScalar",
    },
};
/* tslint:enable */
/* eslint-enable */
