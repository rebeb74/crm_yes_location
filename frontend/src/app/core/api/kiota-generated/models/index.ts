/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AgencyDto extends Parsable {
    /**
     * The accentColor property
     */
    accentColor?: string | null;
    /**
     * The bankAccountBic property
     */
    bankAccountBic?: string | null;
    /**
     * The bankAccountIban property
     */
    bankAccountIban?: string | null;
    /**
     * The city property
     */
    city?: string | null;
    /**
     * The companyName property
     */
    companyName?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The darkModeAccentColor property
     */
    darkModeAccentColor?: string | null;
    /**
     * The darkModeErrorColor property
     */
    darkModeErrorColor?: string | null;
    /**
     * The darkModePrimaryColor property
     */
    darkModePrimaryColor?: string | null;
    /**
     * The darkModeSecondaryColor property
     */
    darkModeSecondaryColor?: string | null;
    /**
     * The darkModeSuccessColor property
     */
    darkModeSuccessColor?: string | null;
    /**
     * The darkModeWarningColor property
     */
    darkModeWarningColor?: string | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The errorColor property
     */
    errorColor?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The logoUrl property
     */
    logoUrl?: string | null;
    /**
     * The phoneNumber property
     */
    phoneNumber?: string | null;
    /**
     * The postalCode property
     */
    postalCode?: string | null;
    /**
     * The primaryColor property
     */
    primaryColor?: string | null;
    /**
     * The secondaryColor property
     */
    secondaryColor?: string | null;
    /**
     * The siretNumber property
     */
    siretNumber?: string | null;
    /**
     * The streetAddress property
     */
    streetAddress?: string | null;
    /**
     * The successColor property
     */
    successColor?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The useDarkMode property
     */
    useDarkMode?: boolean | null;
    /**
     * The vatNumber property
     */
    vatNumber?: string | null;
    /**
     * The warningColor property
     */
    warningColor?: string | null;
    /**
     * The website property
     */
    website?: string | null;
}
export interface AgencyInputDto extends Parsable {
    /**
     * The accentColor property
     */
    accentColor?: string | null;
    /**
     * The bankAccountBic property
     */
    bankAccountBic?: string | null;
    /**
     * The bankAccountIban property
     */
    bankAccountIban?: string | null;
    /**
     * The city property
     */
    city?: string | null;
    /**
     * The companyName property
     */
    companyName?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The darkModeAccentColor property
     */
    darkModeAccentColor?: string | null;
    /**
     * The darkModeErrorColor property
     */
    darkModeErrorColor?: string | null;
    /**
     * The darkModePrimaryColor property
     */
    darkModePrimaryColor?: string | null;
    /**
     * The darkModeSecondaryColor property
     */
    darkModeSecondaryColor?: string | null;
    /**
     * The darkModeSuccessColor property
     */
    darkModeSuccessColor?: string | null;
    /**
     * The darkModeWarningColor property
     */
    darkModeWarningColor?: string | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The errorColor property
     */
    errorColor?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The logoUrl property
     */
    logoUrl?: string | null;
    /**
     * The phoneNumber property
     */
    phoneNumber?: string | null;
    /**
     * The postalCode property
     */
    postalCode?: string | null;
    /**
     * The primaryColor property
     */
    primaryColor?: string | null;
    /**
     * The secondaryColor property
     */
    secondaryColor?: string | null;
    /**
     * The siretNumber property
     */
    siretNumber?: string | null;
    /**
     * The streetAddress property
     */
    streetAddress?: string | null;
    /**
     * The successColor property
     */
    successColor?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The useDarkMode property
     */
    useDarkMode?: boolean | null;
    /**
     * The vatNumber property
     */
    vatNumber?: string | null;
    /**
     * The warningColor property
     */
    warningColor?: string | null;
    /**
     * The website property
     */
    website?: string | null;
}
export interface BookingDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The customerId property
     */
    customerId?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The invoiceId property
     */
    invoiceId?: number | null;
    /**
     * The notes property
     */
    notes?: string | null;
    /**
     * The pickupDate property
     */
    pickupDate?: Date | null;
    /**
     * The pickupLocationId property
     */
    pickupLocationId?: number | null;
    /**
     * The quotationId property
     */
    quotationId?: number | null;
    /**
     * The returnDate property
     */
    returnDate?: Date | null;
    /**
     * The returnLocationId property
     */
    returnLocationId?: number | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The totalAmount property
     */
    totalAmount?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicleId property
     */
    vehicleId?: number | null;
}
export interface BookingInputDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The customerId property
     */
    customerId?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The invoiceId property
     */
    invoiceId?: number | null;
    /**
     * The notes property
     */
    notes?: string | null;
    /**
     * The pickupDate property
     */
    pickupDate?: Date | null;
    /**
     * The pickupLocationId property
     */
    pickupLocationId?: number | null;
    /**
     * The quotationId property
     */
    quotationId?: number | null;
    /**
     * The returnDate property
     */
    returnDate?: Date | null;
    /**
     * The returnLocationId property
     */
    returnLocationId?: number | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The totalAmount property
     */
    totalAmount?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicleId property
     */
    vehicleId?: number | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AgencyDto}
 */
// @ts-ignore
export function createAgencyDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAgencyDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AgencyInputDto}
 */
// @ts-ignore
export function createAgencyInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAgencyInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BookingDto}
 */
// @ts-ignore
export function createBookingDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBookingDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BookingInputDto}
 */
// @ts-ignore
export function createBookingInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBookingInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CustomerDto}
 */
// @ts-ignore
export function createCustomerDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCustomerDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CustomerInputDto}
 */
// @ts-ignore
export function createCustomerInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCustomerInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DurationTierDto}
 */
// @ts-ignore
export function createDurationTierDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDurationTierDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DurationTierInputDto}
 */
// @ts-ignore
export function createDurationTierInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDurationTierInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InvoiceDto}
 */
// @ts-ignore
export function createInvoiceDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInvoiceDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InvoiceInputDto}
 */
// @ts-ignore
export function createInvoiceInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInvoiceInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LocationDto}
 */
// @ts-ignore
export function createLocationDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLocationDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LocationInputDto}
 */
// @ts-ignore
export function createLocationInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLocationInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MaintenanceRecordDto}
 */
// @ts-ignore
export function createMaintenanceRecordDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMaintenanceRecordDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MaintenanceRecordInputDto}
 */
// @ts-ignore
export function createMaintenanceRecordInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMaintenanceRecordInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PaymentDto}
 */
// @ts-ignore
export function createPaymentDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPaymentDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PaymentInputDto}
 */
// @ts-ignore
export function createPaymentInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPaymentInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QuotationDto}
 */
// @ts-ignore
export function createQuotationDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQuotationDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QuotationInputDto}
 */
// @ts-ignore
export function createQuotationInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQuotationInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RoleDto}
 */
// @ts-ignore
export function createRoleDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRoleDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SeasonDto}
 */
// @ts-ignore
export function createSeasonDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSeasonDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SeasonInputDto}
 */
// @ts-ignore
export function createSeasonInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSeasonInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserDto}
 */
// @ts-ignore
export function createUserDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserInputDto}
 */
// @ts-ignore
export function createUserInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VehicleDto}
 */
// @ts-ignore
export function createVehicleDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVehicleDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VehicleIncidentDto}
 */
// @ts-ignore
export function createVehicleIncidentDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVehicleIncidentDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VehicleIncidentInputDto}
 */
// @ts-ignore
export function createVehicleIncidentInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVehicleIncidentInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VehicleIncidentPhotoDto}
 */
// @ts-ignore
export function createVehicleIncidentPhotoDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVehicleIncidentPhotoDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VehicleIncidentPhotoInputDto}
 */
// @ts-ignore
export function createVehicleIncidentPhotoInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVehicleIncidentPhotoInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VehicleInputDto}
 */
// @ts-ignore
export function createVehicleInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVehicleInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VehicleInspectionDto}
 */
// @ts-ignore
export function createVehicleInspectionDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVehicleInspectionDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VehicleInspectionInputDto}
 */
// @ts-ignore
export function createVehicleInspectionInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVehicleInspectionInputDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VehiclePricingDto}
 */
// @ts-ignore
export function createVehiclePricingDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVehiclePricingDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VehiclePricingInputDto}
 */
// @ts-ignore
export function createVehiclePricingInputDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVehiclePricingInputDto;
}
export interface CustomerDto extends Parsable {
    /**
     * The address property
     */
    address?: string | null;
    /**
     * The city property
     */
    city?: string | null;
    /**
     * The companyName property
     */
    companyName?: string | null;
    /**
     * The country property
     */
    country?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The driverLicenseExpiry property
     */
    driverLicenseExpiry?: Date | null;
    /**
     * The driverLicenseNumber property
     */
    driverLicenseNumber?: string | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The emergencyContactName property
     */
    emergencyContactName?: string | null;
    /**
     * The emergencyContactPhone property
     */
    emergencyContactPhone?: string | null;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The notes property
     */
    notes?: string | null;
    /**
     * The phone property
     */
    phone?: string | null;
    /**
     * The state property
     */
    state?: string | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vatNumber property
     */
    vatNumber?: string | null;
    /**
     * The zip property
     */
    zip?: string | null;
}
export interface CustomerInputDto extends Parsable {
    /**
     * The address property
     */
    address?: string | null;
    /**
     * The city property
     */
    city?: string | null;
    /**
     * The companyName property
     */
    companyName?: string | null;
    /**
     * The country property
     */
    country?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The driverLicenseExpiry property
     */
    driverLicenseExpiry?: Date | null;
    /**
     * The driverLicenseNumber property
     */
    driverLicenseNumber?: string | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The emergencyContactName property
     */
    emergencyContactName?: string | null;
    /**
     * The emergencyContactPhone property
     */
    emergencyContactPhone?: string | null;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The notes property
     */
    notes?: string | null;
    /**
     * The phone property
     */
    phone?: string | null;
    /**
     * The state property
     */
    state?: string | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vatNumber property
     */
    vatNumber?: string | null;
    /**
     * The zip property
     */
    zip?: string | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAgencyDto(agencyDto: Partial<AgencyDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accentColor": n => { agencyDto.accentColor = n.getStringValue(); },
        "bankAccountBic": n => { agencyDto.bankAccountBic = n.getStringValue(); },
        "bankAccountIban": n => { agencyDto.bankAccountIban = n.getStringValue(); },
        "city": n => { agencyDto.city = n.getStringValue(); },
        "companyName": n => { agencyDto.companyName = n.getStringValue(); },
        "createdAt": n => { agencyDto.createdAt = n.getDateValue(); },
        "createdBy": n => { agencyDto.createdBy = n.getNumberValue(); },
        "darkModeAccentColor": n => { agencyDto.darkModeAccentColor = n.getStringValue(); },
        "darkModeErrorColor": n => { agencyDto.darkModeErrorColor = n.getStringValue(); },
        "darkModePrimaryColor": n => { agencyDto.darkModePrimaryColor = n.getStringValue(); },
        "darkModeSecondaryColor": n => { agencyDto.darkModeSecondaryColor = n.getStringValue(); },
        "darkModeSuccessColor": n => { agencyDto.darkModeSuccessColor = n.getStringValue(); },
        "darkModeWarningColor": n => { agencyDto.darkModeWarningColor = n.getStringValue(); },
        "email": n => { agencyDto.email = n.getStringValue(); },
        "errorColor": n => { agencyDto.errorColor = n.getStringValue(); },
        "id": n => { agencyDto.id = n.getNumberValue(); },
        "logoUrl": n => { agencyDto.logoUrl = n.getStringValue(); },
        "phoneNumber": n => { agencyDto.phoneNumber = n.getStringValue(); },
        "postalCode": n => { agencyDto.postalCode = n.getStringValue(); },
        "primaryColor": n => { agencyDto.primaryColor = n.getStringValue(); },
        "secondaryColor": n => { agencyDto.secondaryColor = n.getStringValue(); },
        "siretNumber": n => { agencyDto.siretNumber = n.getStringValue(); },
        "streetAddress": n => { agencyDto.streetAddress = n.getStringValue(); },
        "successColor": n => { agencyDto.successColor = n.getStringValue(); },
        "updatedAt": n => { agencyDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { agencyDto.updatedBy = n.getNumberValue(); },
        "useDarkMode": n => { agencyDto.useDarkMode = n.getBooleanValue(); },
        "vatNumber": n => { agencyDto.vatNumber = n.getStringValue(); },
        "warningColor": n => { agencyDto.warningColor = n.getStringValue(); },
        "website": n => { agencyDto.website = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAgencyInputDto(agencyInputDto: Partial<AgencyInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accentColor": n => { agencyInputDto.accentColor = n.getStringValue(); },
        "bankAccountBic": n => { agencyInputDto.bankAccountBic = n.getStringValue(); },
        "bankAccountIban": n => { agencyInputDto.bankAccountIban = n.getStringValue(); },
        "city": n => { agencyInputDto.city = n.getStringValue(); },
        "companyName": n => { agencyInputDto.companyName = n.getStringValue(); },
        "createdAt": n => { agencyInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { agencyInputDto.createdBy = n.getNumberValue(); },
        "darkModeAccentColor": n => { agencyInputDto.darkModeAccentColor = n.getStringValue(); },
        "darkModeErrorColor": n => { agencyInputDto.darkModeErrorColor = n.getStringValue(); },
        "darkModePrimaryColor": n => { agencyInputDto.darkModePrimaryColor = n.getStringValue(); },
        "darkModeSecondaryColor": n => { agencyInputDto.darkModeSecondaryColor = n.getStringValue(); },
        "darkModeSuccessColor": n => { agencyInputDto.darkModeSuccessColor = n.getStringValue(); },
        "darkModeWarningColor": n => { agencyInputDto.darkModeWarningColor = n.getStringValue(); },
        "email": n => { agencyInputDto.email = n.getStringValue(); },
        "errorColor": n => { agencyInputDto.errorColor = n.getStringValue(); },
        "id": n => { agencyInputDto.id = n.getNumberValue(); },
        "logoUrl": n => { agencyInputDto.logoUrl = n.getStringValue(); },
        "phoneNumber": n => { agencyInputDto.phoneNumber = n.getStringValue(); },
        "postalCode": n => { agencyInputDto.postalCode = n.getStringValue(); },
        "primaryColor": n => { agencyInputDto.primaryColor = n.getStringValue(); },
        "secondaryColor": n => { agencyInputDto.secondaryColor = n.getStringValue(); },
        "siretNumber": n => { agencyInputDto.siretNumber = n.getStringValue(); },
        "streetAddress": n => { agencyInputDto.streetAddress = n.getStringValue(); },
        "successColor": n => { agencyInputDto.successColor = n.getStringValue(); },
        "updatedAt": n => { agencyInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { agencyInputDto.updatedBy = n.getNumberValue(); },
        "useDarkMode": n => { agencyInputDto.useDarkMode = n.getBooleanValue(); },
        "vatNumber": n => { agencyInputDto.vatNumber = n.getStringValue(); },
        "warningColor": n => { agencyInputDto.warningColor = n.getStringValue(); },
        "website": n => { agencyInputDto.website = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBookingDto(bookingDto: Partial<BookingDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { bookingDto.createdAt = n.getDateValue(); },
        "createdBy": n => { bookingDto.createdBy = n.getNumberValue(); },
        "customerId": n => { bookingDto.customerId = n.getNumberValue(); },
        "id": n => { bookingDto.id = n.getNumberValue(); },
        "invoiceId": n => { bookingDto.invoiceId = n.getNumberValue(); },
        "notes": n => { bookingDto.notes = n.getStringValue(); },
        "pickupDate": n => { bookingDto.pickupDate = n.getDateValue(); },
        "pickupLocationId": n => { bookingDto.pickupLocationId = n.getNumberValue(); },
        "quotationId": n => { bookingDto.quotationId = n.getNumberValue(); },
        "returnDate": n => { bookingDto.returnDate = n.getDateValue(); },
        "returnLocationId": n => { bookingDto.returnLocationId = n.getNumberValue(); },
        "status": n => { bookingDto.status = n.getNumberValue(); },
        "totalAmount": n => { bookingDto.totalAmount = n.getNumberValue(); },
        "updatedAt": n => { bookingDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { bookingDto.updatedBy = n.getNumberValue(); },
        "vehicleId": n => { bookingDto.vehicleId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBookingInputDto(bookingInputDto: Partial<BookingInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { bookingInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { bookingInputDto.createdBy = n.getNumberValue(); },
        "customerId": n => { bookingInputDto.customerId = n.getNumberValue(); },
        "id": n => { bookingInputDto.id = n.getNumberValue(); },
        "invoiceId": n => { bookingInputDto.invoiceId = n.getNumberValue(); },
        "notes": n => { bookingInputDto.notes = n.getStringValue(); },
        "pickupDate": n => { bookingInputDto.pickupDate = n.getDateValue(); },
        "pickupLocationId": n => { bookingInputDto.pickupLocationId = n.getNumberValue(); },
        "quotationId": n => { bookingInputDto.quotationId = n.getNumberValue(); },
        "returnDate": n => { bookingInputDto.returnDate = n.getDateValue(); },
        "returnLocationId": n => { bookingInputDto.returnLocationId = n.getNumberValue(); },
        "status": n => { bookingInputDto.status = n.getNumberValue(); },
        "totalAmount": n => { bookingInputDto.totalAmount = n.getNumberValue(); },
        "updatedAt": n => { bookingInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { bookingInputDto.updatedBy = n.getNumberValue(); },
        "vehicleId": n => { bookingInputDto.vehicleId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCustomerDto(customerDto: Partial<CustomerDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { customerDto.address = n.getStringValue(); },
        "city": n => { customerDto.city = n.getStringValue(); },
        "companyName": n => { customerDto.companyName = n.getStringValue(); },
        "country": n => { customerDto.country = n.getStringValue(); },
        "createdAt": n => { customerDto.createdAt = n.getDateValue(); },
        "createdBy": n => { customerDto.createdBy = n.getNumberValue(); },
        "driverLicenseExpiry": n => { customerDto.driverLicenseExpiry = n.getDateValue(); },
        "driverLicenseNumber": n => { customerDto.driverLicenseNumber = n.getStringValue(); },
        "email": n => { customerDto.email = n.getStringValue(); },
        "emergencyContactName": n => { customerDto.emergencyContactName = n.getStringValue(); },
        "emergencyContactPhone": n => { customerDto.emergencyContactPhone = n.getStringValue(); },
        "firstName": n => { customerDto.firstName = n.getStringValue(); },
        "id": n => { customerDto.id = n.getNumberValue(); },
        "lastName": n => { customerDto.lastName = n.getStringValue(); },
        "notes": n => { customerDto.notes = n.getStringValue(); },
        "phone": n => { customerDto.phone = n.getStringValue(); },
        "state": n => { customerDto.state = n.getStringValue(); },
        "type": n => { customerDto.type = n.getNumberValue(); },
        "updatedAt": n => { customerDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { customerDto.updatedBy = n.getNumberValue(); },
        "vatNumber": n => { customerDto.vatNumber = n.getStringValue(); },
        "zip": n => { customerDto.zip = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCustomerInputDto(customerInputDto: Partial<CustomerInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { customerInputDto.address = n.getStringValue(); },
        "city": n => { customerInputDto.city = n.getStringValue(); },
        "companyName": n => { customerInputDto.companyName = n.getStringValue(); },
        "country": n => { customerInputDto.country = n.getStringValue(); },
        "createdAt": n => { customerInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { customerInputDto.createdBy = n.getNumberValue(); },
        "driverLicenseExpiry": n => { customerInputDto.driverLicenseExpiry = n.getDateValue(); },
        "driverLicenseNumber": n => { customerInputDto.driverLicenseNumber = n.getStringValue(); },
        "email": n => { customerInputDto.email = n.getStringValue(); },
        "emergencyContactName": n => { customerInputDto.emergencyContactName = n.getStringValue(); },
        "emergencyContactPhone": n => { customerInputDto.emergencyContactPhone = n.getStringValue(); },
        "firstName": n => { customerInputDto.firstName = n.getStringValue(); },
        "id": n => { customerInputDto.id = n.getNumberValue(); },
        "lastName": n => { customerInputDto.lastName = n.getStringValue(); },
        "notes": n => { customerInputDto.notes = n.getStringValue(); },
        "phone": n => { customerInputDto.phone = n.getStringValue(); },
        "state": n => { customerInputDto.state = n.getStringValue(); },
        "type": n => { customerInputDto.type = n.getNumberValue(); },
        "updatedAt": n => { customerInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { customerInputDto.updatedBy = n.getNumberValue(); },
        "vatNumber": n => { customerInputDto.vatNumber = n.getStringValue(); },
        "zip": n => { customerInputDto.zip = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDurationTierDto(durationTierDto: Partial<DurationTierDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { durationTierDto.createdAt = n.getDateValue(); },
        "createdBy": n => { durationTierDto.createdBy = n.getNumberValue(); },
        "id": n => { durationTierDto.id = n.getNumberValue(); },
        "maxDays": n => { durationTierDto.maxDays = n.getNumberValue(); },
        "minDays": n => { durationTierDto.minDays = n.getNumberValue(); },
        "name": n => { durationTierDto.name = n.getStringValue(); },
        "updatedAt": n => { durationTierDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { durationTierDto.updatedBy = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDurationTierInputDto(durationTierInputDto: Partial<DurationTierInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { durationTierInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { durationTierInputDto.createdBy = n.getNumberValue(); },
        "id": n => { durationTierInputDto.id = n.getNumberValue(); },
        "maxDays": n => { durationTierInputDto.maxDays = n.getNumberValue(); },
        "minDays": n => { durationTierInputDto.minDays = n.getNumberValue(); },
        "name": n => { durationTierInputDto.name = n.getStringValue(); },
        "updatedAt": n => { durationTierInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { durationTierInputDto.updatedBy = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInvoiceDto(invoiceDto: Partial<InvoiceDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { invoiceDto.amount = n.getNumberValue(); },
        "bookingId": n => { invoiceDto.bookingId = n.getNumberValue(); },
        "createdAt": n => { invoiceDto.createdAt = n.getDateValue(); },
        "createdBy": n => { invoiceDto.createdBy = n.getNumberValue(); },
        "dueDate": n => { invoiceDto.dueDate = n.getDateValue(); },
        "id": n => { invoiceDto.id = n.getNumberValue(); },
        "invoiceNumber": n => { invoiceDto.invoiceNumber = n.getStringValue(); },
        "issueDate": n => { invoiceDto.issueDate = n.getDateValue(); },
        "paidAmount": n => { invoiceDto.paidAmount = n.getNumberValue(); },
        "status": n => { invoiceDto.status = n.getNumberValue(); },
        "updatedAt": n => { invoiceDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { invoiceDto.updatedBy = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInvoiceInputDto(invoiceInputDto: Partial<InvoiceInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { invoiceInputDto.amount = n.getNumberValue(); },
        "bookingId": n => { invoiceInputDto.bookingId = n.getNumberValue(); },
        "createdAt": n => { invoiceInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { invoiceInputDto.createdBy = n.getNumberValue(); },
        "dueDate": n => { invoiceInputDto.dueDate = n.getDateValue(); },
        "id": n => { invoiceInputDto.id = n.getNumberValue(); },
        "invoiceNumber": n => { invoiceInputDto.invoiceNumber = n.getStringValue(); },
        "issueDate": n => { invoiceInputDto.issueDate = n.getDateValue(); },
        "status": n => { invoiceInputDto.status = n.getNumberValue(); },
        "updatedAt": n => { invoiceInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { invoiceInputDto.updatedBy = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLocationDto(locationDto: Partial<LocationDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { locationDto.address = n.getStringValue(); },
        "city": n => { locationDto.city = n.getStringValue(); },
        "createdAt": n => { locationDto.createdAt = n.getDateValue(); },
        "createdBy": n => { locationDto.createdBy = n.getNumberValue(); },
        "id": n => { locationDto.id = n.getNumberValue(); },
        "isActive": n => { locationDto.isActive = n.getBooleanValue(); },
        "name": n => { locationDto.name = n.getStringValue(); },
        "postalCode": n => { locationDto.postalCode = n.getStringValue(); },
        "updatedAt": n => { locationDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { locationDto.updatedBy = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLocationInputDto(locationInputDto: Partial<LocationInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { locationInputDto.address = n.getStringValue(); },
        "city": n => { locationInputDto.city = n.getStringValue(); },
        "createdAt": n => { locationInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { locationInputDto.createdBy = n.getNumberValue(); },
        "id": n => { locationInputDto.id = n.getNumberValue(); },
        "isActive": n => { locationInputDto.isActive = n.getBooleanValue(); },
        "name": n => { locationInputDto.name = n.getStringValue(); },
        "postalCode": n => { locationInputDto.postalCode = n.getStringValue(); },
        "updatedAt": n => { locationInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { locationInputDto.updatedBy = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMaintenanceRecordDto(maintenanceRecordDto: Partial<MaintenanceRecordDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "cost": n => { maintenanceRecordDto.cost = n.getNumberValue(); },
        "createdAt": n => { maintenanceRecordDto.createdAt = n.getDateValue(); },
        "createdBy": n => { maintenanceRecordDto.createdBy = n.getNumberValue(); },
        "description": n => { maintenanceRecordDto.description = n.getStringValue(); },
        "id": n => { maintenanceRecordDto.id = n.getNumberValue(); },
        "maintenanceDate": n => { maintenanceRecordDto.maintenanceDate = n.getDateValue(); },
        "mileage": n => { maintenanceRecordDto.mileage = n.getNumberValue(); },
        "serviceProvider": n => { maintenanceRecordDto.serviceProvider = n.getStringValue(); },
        "type": n => { maintenanceRecordDto.type = n.getNumberValue(); },
        "updatedAt": n => { maintenanceRecordDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { maintenanceRecordDto.updatedBy = n.getNumberValue(); },
        "vehicleId": n => { maintenanceRecordDto.vehicleId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMaintenanceRecordInputDto(maintenanceRecordInputDto: Partial<MaintenanceRecordInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "cost": n => { maintenanceRecordInputDto.cost = n.getNumberValue(); },
        "createdAt": n => { maintenanceRecordInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { maintenanceRecordInputDto.createdBy = n.getNumberValue(); },
        "description": n => { maintenanceRecordInputDto.description = n.getStringValue(); },
        "id": n => { maintenanceRecordInputDto.id = n.getNumberValue(); },
        "maintenanceDate": n => { maintenanceRecordInputDto.maintenanceDate = n.getDateValue(); },
        "mileage": n => { maintenanceRecordInputDto.mileage = n.getNumberValue(); },
        "serviceProvider": n => { maintenanceRecordInputDto.serviceProvider = n.getStringValue(); },
        "type": n => { maintenanceRecordInputDto.type = n.getNumberValue(); },
        "updatedAt": n => { maintenanceRecordInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { maintenanceRecordInputDto.updatedBy = n.getNumberValue(); },
        "vehicleId": n => { maintenanceRecordInputDto.vehicleId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPaymentDto(paymentDto: Partial<PaymentDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { paymentDto.amount = n.getNumberValue(); },
        "createdAt": n => { paymentDto.createdAt = n.getDateValue(); },
        "createdBy": n => { paymentDto.createdBy = n.getNumberValue(); },
        "id": n => { paymentDto.id = n.getNumberValue(); },
        "invoiceId": n => { paymentDto.invoiceId = n.getNumberValue(); },
        "paymentDate": n => { paymentDto.paymentDate = n.getDateValue(); },
        "paymentMethod": n => { paymentDto.paymentMethod = n.getNumberValue(); },
        "transactionReference": n => { paymentDto.transactionReference = n.getStringValue(); },
        "updatedAt": n => { paymentDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { paymentDto.updatedBy = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPaymentInputDto(paymentInputDto: Partial<PaymentInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { paymentInputDto.amount = n.getNumberValue(); },
        "createdAt": n => { paymentInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { paymentInputDto.createdBy = n.getNumberValue(); },
        "id": n => { paymentInputDto.id = n.getNumberValue(); },
        "invoiceId": n => { paymentInputDto.invoiceId = n.getNumberValue(); },
        "paymentDate": n => { paymentInputDto.paymentDate = n.getDateValue(); },
        "paymentMethod": n => { paymentInputDto.paymentMethod = n.getNumberValue(); },
        "transactionReference": n => { paymentInputDto.transactionReference = n.getStringValue(); },
        "updatedAt": n => { paymentInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { paymentInputDto.updatedBy = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQuotationDto(quotationDto: Partial<QuotationDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { quotationDto.amount = n.getNumberValue(); },
        "createdAt": n => { quotationDto.createdAt = n.getDateValue(); },
        "createdBy": n => { quotationDto.createdBy = n.getNumberValue(); },
        "customerId": n => { quotationDto.customerId = n.getNumberValue(); },
        "id": n => { quotationDto.id = n.getNumberValue(); },
        "status": n => { quotationDto.status = n.getNumberValue(); },
        "updatedAt": n => { quotationDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { quotationDto.updatedBy = n.getNumberValue(); },
        "validUntil": n => { quotationDto.validUntil = n.getDateValue(); },
        "vehicleId": n => { quotationDto.vehicleId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQuotationInputDto(quotationInputDto: Partial<QuotationInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { quotationInputDto.amount = n.getNumberValue(); },
        "createdAt": n => { quotationInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { quotationInputDto.createdBy = n.getNumberValue(); },
        "customerId": n => { quotationInputDto.customerId = n.getNumberValue(); },
        "id": n => { quotationInputDto.id = n.getNumberValue(); },
        "status": n => { quotationInputDto.status = n.getNumberValue(); },
        "updatedAt": n => { quotationInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { quotationInputDto.updatedBy = n.getNumberValue(); },
        "validUntil": n => { quotationInputDto.validUntil = n.getDateValue(); },
        "vehicleId": n => { quotationInputDto.vehicleId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRoleDto(roleDto: Partial<RoleDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { roleDto.createdAt = n.getDateValue(); },
        "createdBy": n => { roleDto.createdBy = n.getNumberValue(); },
        "description": n => { roleDto.description = n.getStringValue(); },
        "id": n => { roleDto.id = n.getNumberValue(); },
        "name": n => { roleDto.name = n.getStringValue(); },
        "updatedAt": n => { roleDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { roleDto.updatedBy = n.getNumberValue(); },
        "value": n => { roleDto.value = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSeasonDto(seasonDto: Partial<SeasonDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { seasonDto.createdAt = n.getDateValue(); },
        "createdBy": n => { seasonDto.createdBy = n.getNumberValue(); },
        "endDate": n => { seasonDto.endDate = n.getDateValue(); },
        "id": n => { seasonDto.id = n.getNumberValue(); },
        "name": n => { seasonDto.name = n.getStringValue(); },
        "startDate": n => { seasonDto.startDate = n.getDateValue(); },
        "type": n => { seasonDto.type = n.getNumberValue(); },
        "updatedAt": n => { seasonDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { seasonDto.updatedBy = n.getNumberValue(); },
        "year": n => { seasonDto.year = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSeasonInputDto(seasonInputDto: Partial<SeasonInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { seasonInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { seasonInputDto.createdBy = n.getNumberValue(); },
        "endDate": n => { seasonInputDto.endDate = n.getDateValue(); },
        "id": n => { seasonInputDto.id = n.getNumberValue(); },
        "name": n => { seasonInputDto.name = n.getStringValue(); },
        "startDate": n => { seasonInputDto.startDate = n.getDateValue(); },
        "type": n => { seasonInputDto.type = n.getNumberValue(); },
        "updatedAt": n => { seasonInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { seasonInputDto.updatedBy = n.getNumberValue(); },
        "year": n => { seasonInputDto.year = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserDto(userDto: Partial<UserDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { userDto.createdAt = n.getDateValue(); },
        "createdBy": n => { userDto.createdBy = n.getNumberValue(); },
        "email": n => { userDto.email = n.getStringValue(); },
        "firstName": n => { userDto.firstName = n.getStringValue(); },
        "id": n => { userDto.id = n.getNumberValue(); },
        "lastName": n => { userDto.lastName = n.getStringValue(); },
        "updatedAt": n => { userDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { userDto.updatedBy = n.getNumberValue(); },
        "username": n => { userDto.username = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserInputDto(userInputDto: Partial<UserInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { userInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { userInputDto.createdBy = n.getNumberValue(); },
        "email": n => { userInputDto.email = n.getStringValue(); },
        "firstName": n => { userInputDto.firstName = n.getStringValue(); },
        "id": n => { userInputDto.id = n.getNumberValue(); },
        "lastName": n => { userInputDto.lastName = n.getStringValue(); },
        "updatedAt": n => { userInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { userInputDto.updatedBy = n.getNumberValue(); },
        "username": n => { userInputDto.username = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVehicleDto(vehicleDto: Partial<VehicleDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "brand": n => { vehicleDto.brand = n.getStringValue(); },
        "category": n => { vehicleDto.category = n.getNumberValue(); },
        "createdAt": n => { vehicleDto.createdAt = n.getDateValue(); },
        "createdBy": n => { vehicleDto.createdBy = n.getNumberValue(); },
        "fuelType": n => { vehicleDto.fuelType = n.getStringValue(); },
        "id": n => { vehicleDto.id = n.getNumberValue(); },
        "mileage": n => { vehicleDto.mileage = n.getNumberValue(); },
        "model": n => { vehicleDto.model = n.getStringValue(); },
        "registrationNumber": n => { vehicleDto.registrationNumber = n.getStringValue(); },
        "status": n => { vehicleDto.status = n.getNumberValue(); },
        "transmission": n => { vehicleDto.transmission = n.getStringValue(); },
        "type": n => { vehicleDto.type = n.getNumberValue(); },
        "updatedAt": n => { vehicleDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { vehicleDto.updatedBy = n.getNumberValue(); },
        "year": n => { vehicleDto.year = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVehicleIncidentDto(vehicleIncidentDto: Partial<VehicleIncidentDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { vehicleIncidentDto.createdAt = n.getDateValue(); },
        "createdBy": n => { vehicleIncidentDto.createdBy = n.getNumberValue(); },
        "description": n => { vehicleIncidentDto.description = n.getStringValue(); },
        "id": n => { vehicleIncidentDto.id = n.getNumberValue(); },
        "partLocation": n => { vehicleIncidentDto.partLocation = n.getNumberValue(); },
        "photos": n => { vehicleIncidentDto.photos = n.getCollectionOfObjectValues<VehicleIncidentPhotoDto>(createVehicleIncidentPhotoDtoFromDiscriminatorValue); },
        "type": n => { vehicleIncidentDto.type = n.getNumberValue(); },
        "updatedAt": n => { vehicleIncidentDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { vehicleIncidentDto.updatedBy = n.getNumberValue(); },
        "vehicleInspectionId": n => { vehicleIncidentDto.vehicleInspectionId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVehicleIncidentInputDto(vehicleIncidentInputDto: Partial<VehicleIncidentInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { vehicleIncidentInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { vehicleIncidentInputDto.createdBy = n.getNumberValue(); },
        "description": n => { vehicleIncidentInputDto.description = n.getStringValue(); },
        "id": n => { vehicleIncidentInputDto.id = n.getNumberValue(); },
        "partLocation": n => { vehicleIncidentInputDto.partLocation = n.getNumberValue(); },
        "type": n => { vehicleIncidentInputDto.type = n.getNumberValue(); },
        "updatedAt": n => { vehicleIncidentInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { vehicleIncidentInputDto.updatedBy = n.getNumberValue(); },
        "vehicleInspectionId": n => { vehicleIncidentInputDto.vehicleInspectionId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVehicleIncidentPhotoDto(vehicleIncidentPhotoDto: Partial<VehicleIncidentPhotoDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "caption": n => { vehicleIncidentPhotoDto.caption = n.getStringValue(); },
        "createdAt": n => { vehicleIncidentPhotoDto.createdAt = n.getDateValue(); },
        "createdBy": n => { vehicleIncidentPhotoDto.createdBy = n.getNumberValue(); },
        "id": n => { vehicleIncidentPhotoDto.id = n.getNumberValue(); },
        "photoUrl": n => { vehicleIncidentPhotoDto.photoUrl = n.getStringValue(); },
        "updatedAt": n => { vehicleIncidentPhotoDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { vehicleIncidentPhotoDto.updatedBy = n.getNumberValue(); },
        "vehicleIncidentId": n => { vehicleIncidentPhotoDto.vehicleIncidentId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVehicleIncidentPhotoInputDto(vehicleIncidentPhotoInputDto: Partial<VehicleIncidentPhotoInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "caption": n => { vehicleIncidentPhotoInputDto.caption = n.getStringValue(); },
        "createdAt": n => { vehicleIncidentPhotoInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { vehicleIncidentPhotoInputDto.createdBy = n.getNumberValue(); },
        "id": n => { vehicleIncidentPhotoInputDto.id = n.getNumberValue(); },
        "photoUrl": n => { vehicleIncidentPhotoInputDto.photoUrl = n.getStringValue(); },
        "updatedAt": n => { vehicleIncidentPhotoInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { vehicleIncidentPhotoInputDto.updatedBy = n.getNumberValue(); },
        "vehicleIncidentId": n => { vehicleIncidentPhotoInputDto.vehicleIncidentId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVehicleInputDto(vehicleInputDto: Partial<VehicleInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "brand": n => { vehicleInputDto.brand = n.getStringValue(); },
        "category": n => { vehicleInputDto.category = n.getNumberValue(); },
        "createdAt": n => { vehicleInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { vehicleInputDto.createdBy = n.getNumberValue(); },
        "fuelType": n => { vehicleInputDto.fuelType = n.getStringValue(); },
        "id": n => { vehicleInputDto.id = n.getNumberValue(); },
        "mileage": n => { vehicleInputDto.mileage = n.getNumberValue(); },
        "model": n => { vehicleInputDto.model = n.getStringValue(); },
        "registrationNumber": n => { vehicleInputDto.registrationNumber = n.getStringValue(); },
        "status": n => { vehicleInputDto.status = n.getNumberValue(); },
        "transmission": n => { vehicleInputDto.transmission = n.getStringValue(); },
        "type": n => { vehicleInputDto.type = n.getNumberValue(); },
        "updatedAt": n => { vehicleInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { vehicleInputDto.updatedBy = n.getNumberValue(); },
        "year": n => { vehicleInputDto.year = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVehicleInspectionDto(vehicleInspectionDto: Partial<VehicleInspectionDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "bookingId": n => { vehicleInspectionDto.bookingId = n.getNumberValue(); },
        "createdAt": n => { vehicleInspectionDto.createdAt = n.getDateValue(); },
        "createdBy": n => { vehicleInspectionDto.createdBy = n.getNumberValue(); },
        "fuelLevel": n => { vehicleInspectionDto.fuelLevel = n.getNumberValue(); },
        "id": n => { vehicleInspectionDto.id = n.getNumberValue(); },
        "incidents": n => { vehicleInspectionDto.incidents = n.getCollectionOfObjectValues<VehicleIncidentDto>(createVehicleIncidentDtoFromDiscriminatorValue); },
        "inspectedByUserId": n => { vehicleInspectionDto.inspectedByUserId = n.getNumberValue(); },
        "inspectionDate": n => { vehicleInspectionDto.inspectionDate = n.getDateValue(); },
        "mileage": n => { vehicleInspectionDto.mileage = n.getNumberValue(); },
        "notes": n => { vehicleInspectionDto.notes = n.getStringValue(); },
        "signatureUrl": n => { vehicleInspectionDto.signatureUrl = n.getStringValue(); },
        "type": n => { vehicleInspectionDto.type = n.getNumberValue(); },
        "updatedAt": n => { vehicleInspectionDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { vehicleInspectionDto.updatedBy = n.getNumberValue(); },
        "vehicleCleaned": n => { vehicleInspectionDto.vehicleCleaned = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVehicleInspectionInputDto(vehicleInspectionInputDto: Partial<VehicleInspectionInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "bookingId": n => { vehicleInspectionInputDto.bookingId = n.getNumberValue(); },
        "createdAt": n => { vehicleInspectionInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { vehicleInspectionInputDto.createdBy = n.getNumberValue(); },
        "fuelLevel": n => { vehicleInspectionInputDto.fuelLevel = n.getNumberValue(); },
        "id": n => { vehicleInspectionInputDto.id = n.getNumberValue(); },
        "inspectedByUserId": n => { vehicleInspectionInputDto.inspectedByUserId = n.getNumberValue(); },
        "inspectionDate": n => { vehicleInspectionInputDto.inspectionDate = n.getDateValue(); },
        "mileage": n => { vehicleInspectionInputDto.mileage = n.getNumberValue(); },
        "notes": n => { vehicleInspectionInputDto.notes = n.getStringValue(); },
        "signatureUrl": n => { vehicleInspectionInputDto.signatureUrl = n.getStringValue(); },
        "type": n => { vehicleInspectionInputDto.type = n.getNumberValue(); },
        "updatedAt": n => { vehicleInspectionInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { vehicleInspectionInputDto.updatedBy = n.getNumberValue(); },
        "vehicleCleaned": n => { vehicleInspectionInputDto.vehicleCleaned = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVehiclePricingDto(vehiclePricingDto: Partial<VehiclePricingDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { vehiclePricingDto.createdAt = n.getDateValue(); },
        "createdBy": n => { vehiclePricingDto.createdBy = n.getNumberValue(); },
        "dailyRate": n => { vehiclePricingDto.dailyRate = n.getNumberValue(); },
        "durationTier": n => { vehiclePricingDto.durationTier = n.getObjectValue<DurationTierDto>(createDurationTierDtoFromDiscriminatorValue); },
        "durationTierId": n => { vehiclePricingDto.durationTierId = n.getNumberValue(); },
        "id": n => { vehiclePricingDto.id = n.getNumberValue(); },
        "season": n => { vehiclePricingDto.season = n.getObjectValue<SeasonDto>(createSeasonDtoFromDiscriminatorValue); },
        "seasonId": n => { vehiclePricingDto.seasonId = n.getNumberValue(); },
        "updatedAt": n => { vehiclePricingDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { vehiclePricingDto.updatedBy = n.getNumberValue(); },
        "vehicle": n => { vehiclePricingDto.vehicle = n.getObjectValue<VehicleDto>(createVehicleDtoFromDiscriminatorValue); },
        "vehicleId": n => { vehiclePricingDto.vehicleId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVehiclePricingInputDto(vehiclePricingInputDto: Partial<VehiclePricingInputDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { vehiclePricingInputDto.createdAt = n.getDateValue(); },
        "createdBy": n => { vehiclePricingInputDto.createdBy = n.getNumberValue(); },
        "dailyRate": n => { vehiclePricingInputDto.dailyRate = n.getNumberValue(); },
        "durationTierId": n => { vehiclePricingInputDto.durationTierId = n.getNumberValue(); },
        "id": n => { vehiclePricingInputDto.id = n.getNumberValue(); },
        "seasonId": n => { vehiclePricingInputDto.seasonId = n.getNumberValue(); },
        "updatedAt": n => { vehiclePricingInputDto.updatedAt = n.getDateValue(); },
        "updatedBy": n => { vehiclePricingInputDto.updatedBy = n.getNumberValue(); },
        "vehicleId": n => { vehiclePricingInputDto.vehicleId = n.getNumberValue(); },
    }
}
export interface DurationTierDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The maxDays property
     */
    maxDays?: number | null;
    /**
     * The minDays property
     */
    minDays?: number | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
}
export interface DurationTierInputDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The maxDays property
     */
    maxDays?: number | null;
    /**
     * The minDays property
     */
    minDays?: number | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
}
export interface InvoiceDto extends Parsable {
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The bookingId property
     */
    bookingId?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The dueDate property
     */
    dueDate?: Date | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The invoiceNumber property
     */
    invoiceNumber?: string | null;
    /**
     * The issueDate property
     */
    issueDate?: Date | null;
    /**
     * The paidAmount property
     */
    paidAmount?: number | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
}
export interface InvoiceInputDto extends Parsable {
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The bookingId property
     */
    bookingId?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The dueDate property
     */
    dueDate?: Date | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The invoiceNumber property
     */
    invoiceNumber?: string | null;
    /**
     * The issueDate property
     */
    issueDate?: Date | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
}
export interface LocationDto extends Parsable {
    /**
     * The address property
     */
    address?: string | null;
    /**
     * The city property
     */
    city?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The isActive property
     */
    isActive?: boolean | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The postalCode property
     */
    postalCode?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
}
export interface LocationInputDto extends Parsable {
    /**
     * The address property
     */
    address?: string | null;
    /**
     * The city property
     */
    city?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The isActive property
     */
    isActive?: boolean | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The postalCode property
     */
    postalCode?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
}
export interface MaintenanceRecordDto extends Parsable {
    /**
     * The cost property
     */
    cost?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The maintenanceDate property
     */
    maintenanceDate?: Date | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The serviceProvider property
     */
    serviceProvider?: string | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicleId property
     */
    vehicleId?: number | null;
}
export interface MaintenanceRecordInputDto extends Parsable {
    /**
     * The cost property
     */
    cost?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The maintenanceDate property
     */
    maintenanceDate?: Date | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The serviceProvider property
     */
    serviceProvider?: string | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicleId property
     */
    vehicleId?: number | null;
}
export interface PaymentDto extends Parsable {
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The invoiceId property
     */
    invoiceId?: number | null;
    /**
     * The paymentDate property
     */
    paymentDate?: Date | null;
    /**
     * The paymentMethod property
     */
    paymentMethod?: number | null;
    /**
     * The transactionReference property
     */
    transactionReference?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
}
export interface PaymentInputDto extends Parsable {
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The invoiceId property
     */
    invoiceId?: number | null;
    /**
     * The paymentDate property
     */
    paymentDate?: Date | null;
    /**
     * The paymentMethod property
     */
    paymentMethod?: number | null;
    /**
     * The transactionReference property
     */
    transactionReference?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
}
export interface QuotationDto extends Parsable {
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The customerId property
     */
    customerId?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The validUntil property
     */
    validUntil?: Date | null;
    /**
     * The vehicleId property
     */
    vehicleId?: number | null;
}
export interface QuotationInputDto extends Parsable {
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The customerId property
     */
    customerId?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The validUntil property
     */
    validUntil?: Date | null;
    /**
     * The vehicleId property
     */
    vehicleId?: number | null;
}
export interface RoleDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The value property
     */
    value?: number | null;
}
export interface SeasonDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The endDate property
     */
    endDate?: Date | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The startDate property
     */
    startDate?: Date | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The year property
     */
    year?: number | null;
}
export interface SeasonInputDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The endDate property
     */
    endDate?: Date | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The startDate property
     */
    startDate?: Date | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The year property
     */
    year?: number | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAgencyDto(writer: SerializationWriter, agencyDto: Partial<AgencyDto> | undefined | null = {}) : void {
    if (agencyDto) {
        writer.writeStringValue("accentColor", agencyDto.accentColor);
        writer.writeStringValue("bankAccountBic", agencyDto.bankAccountBic);
        writer.writeStringValue("bankAccountIban", agencyDto.bankAccountIban);
        writer.writeStringValue("city", agencyDto.city);
        writer.writeStringValue("companyName", agencyDto.companyName);
        writer.writeDateValue("createdAt", agencyDto.createdAt);
        writer.writeNumberValue("createdBy", agencyDto.createdBy);
        writer.writeStringValue("darkModeAccentColor", agencyDto.darkModeAccentColor);
        writer.writeStringValue("darkModeErrorColor", agencyDto.darkModeErrorColor);
        writer.writeStringValue("darkModePrimaryColor", agencyDto.darkModePrimaryColor);
        writer.writeStringValue("darkModeSecondaryColor", agencyDto.darkModeSecondaryColor);
        writer.writeStringValue("darkModeSuccessColor", agencyDto.darkModeSuccessColor);
        writer.writeStringValue("darkModeWarningColor", agencyDto.darkModeWarningColor);
        writer.writeStringValue("email", agencyDto.email);
        writer.writeStringValue("errorColor", agencyDto.errorColor);
        writer.writeNumberValue("id", agencyDto.id);
        writer.writeStringValue("logoUrl", agencyDto.logoUrl);
        writer.writeStringValue("phoneNumber", agencyDto.phoneNumber);
        writer.writeStringValue("postalCode", agencyDto.postalCode);
        writer.writeStringValue("primaryColor", agencyDto.primaryColor);
        writer.writeStringValue("secondaryColor", agencyDto.secondaryColor);
        writer.writeStringValue("siretNumber", agencyDto.siretNumber);
        writer.writeStringValue("streetAddress", agencyDto.streetAddress);
        writer.writeStringValue("successColor", agencyDto.successColor);
        writer.writeDateValue("updatedAt", agencyDto.updatedAt);
        writer.writeNumberValue("updatedBy", agencyDto.updatedBy);
        writer.writeBooleanValue("useDarkMode", agencyDto.useDarkMode);
        writer.writeStringValue("vatNumber", agencyDto.vatNumber);
        writer.writeStringValue("warningColor", agencyDto.warningColor);
        writer.writeStringValue("website", agencyDto.website);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAgencyInputDto(writer: SerializationWriter, agencyInputDto: Partial<AgencyInputDto> | undefined | null = {}) : void {
    if (agencyInputDto) {
        writer.writeStringValue("accentColor", agencyInputDto.accentColor);
        writer.writeStringValue("bankAccountBic", agencyInputDto.bankAccountBic);
        writer.writeStringValue("bankAccountIban", agencyInputDto.bankAccountIban);
        writer.writeStringValue("city", agencyInputDto.city);
        writer.writeStringValue("companyName", agencyInputDto.companyName);
        writer.writeDateValue("createdAt", agencyInputDto.createdAt);
        writer.writeNumberValue("createdBy", agencyInputDto.createdBy);
        writer.writeStringValue("darkModeAccentColor", agencyInputDto.darkModeAccentColor);
        writer.writeStringValue("darkModeErrorColor", agencyInputDto.darkModeErrorColor);
        writer.writeStringValue("darkModePrimaryColor", agencyInputDto.darkModePrimaryColor);
        writer.writeStringValue("darkModeSecondaryColor", agencyInputDto.darkModeSecondaryColor);
        writer.writeStringValue("darkModeSuccessColor", agencyInputDto.darkModeSuccessColor);
        writer.writeStringValue("darkModeWarningColor", agencyInputDto.darkModeWarningColor);
        writer.writeStringValue("email", agencyInputDto.email);
        writer.writeStringValue("errorColor", agencyInputDto.errorColor);
        writer.writeNumberValue("id", agencyInputDto.id);
        writer.writeStringValue("logoUrl", agencyInputDto.logoUrl);
        writer.writeStringValue("phoneNumber", agencyInputDto.phoneNumber);
        writer.writeStringValue("postalCode", agencyInputDto.postalCode);
        writer.writeStringValue("primaryColor", agencyInputDto.primaryColor);
        writer.writeStringValue("secondaryColor", agencyInputDto.secondaryColor);
        writer.writeStringValue("siretNumber", agencyInputDto.siretNumber);
        writer.writeStringValue("streetAddress", agencyInputDto.streetAddress);
        writer.writeStringValue("successColor", agencyInputDto.successColor);
        writer.writeDateValue("updatedAt", agencyInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", agencyInputDto.updatedBy);
        writer.writeBooleanValue("useDarkMode", agencyInputDto.useDarkMode);
        writer.writeStringValue("vatNumber", agencyInputDto.vatNumber);
        writer.writeStringValue("warningColor", agencyInputDto.warningColor);
        writer.writeStringValue("website", agencyInputDto.website);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBookingDto(writer: SerializationWriter, bookingDto: Partial<BookingDto> | undefined | null = {}) : void {
    if (bookingDto) {
        writer.writeDateValue("createdAt", bookingDto.createdAt);
        writer.writeNumberValue("createdBy", bookingDto.createdBy);
        writer.writeNumberValue("customerId", bookingDto.customerId);
        writer.writeNumberValue("id", bookingDto.id);
        writer.writeNumberValue("invoiceId", bookingDto.invoiceId);
        writer.writeStringValue("notes", bookingDto.notes);
        writer.writeDateValue("pickupDate", bookingDto.pickupDate);
        writer.writeNumberValue("pickupLocationId", bookingDto.pickupLocationId);
        writer.writeNumberValue("quotationId", bookingDto.quotationId);
        writer.writeDateValue("returnDate", bookingDto.returnDate);
        writer.writeNumberValue("returnLocationId", bookingDto.returnLocationId);
        writer.writeNumberValue("status", bookingDto.status);
        writer.writeNumberValue("totalAmount", bookingDto.totalAmount);
        writer.writeDateValue("updatedAt", bookingDto.updatedAt);
        writer.writeNumberValue("updatedBy", bookingDto.updatedBy);
        writer.writeNumberValue("vehicleId", bookingDto.vehicleId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBookingInputDto(writer: SerializationWriter, bookingInputDto: Partial<BookingInputDto> | undefined | null = {}) : void {
    if (bookingInputDto) {
        writer.writeDateValue("createdAt", bookingInputDto.createdAt);
        writer.writeNumberValue("createdBy", bookingInputDto.createdBy);
        writer.writeNumberValue("customerId", bookingInputDto.customerId);
        writer.writeNumberValue("id", bookingInputDto.id);
        writer.writeNumberValue("invoiceId", bookingInputDto.invoiceId);
        writer.writeStringValue("notes", bookingInputDto.notes);
        writer.writeDateValue("pickupDate", bookingInputDto.pickupDate);
        writer.writeNumberValue("pickupLocationId", bookingInputDto.pickupLocationId);
        writer.writeNumberValue("quotationId", bookingInputDto.quotationId);
        writer.writeDateValue("returnDate", bookingInputDto.returnDate);
        writer.writeNumberValue("returnLocationId", bookingInputDto.returnLocationId);
        writer.writeNumberValue("status", bookingInputDto.status);
        writer.writeNumberValue("totalAmount", bookingInputDto.totalAmount);
        writer.writeDateValue("updatedAt", bookingInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", bookingInputDto.updatedBy);
        writer.writeNumberValue("vehicleId", bookingInputDto.vehicleId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCustomerDto(writer: SerializationWriter, customerDto: Partial<CustomerDto> | undefined | null = {}) : void {
    if (customerDto) {
        writer.writeStringValue("address", customerDto.address);
        writer.writeStringValue("city", customerDto.city);
        writer.writeStringValue("companyName", customerDto.companyName);
        writer.writeStringValue("country", customerDto.country);
        writer.writeDateValue("createdAt", customerDto.createdAt);
        writer.writeNumberValue("createdBy", customerDto.createdBy);
        writer.writeDateValue("driverLicenseExpiry", customerDto.driverLicenseExpiry);
        writer.writeStringValue("driverLicenseNumber", customerDto.driverLicenseNumber);
        writer.writeStringValue("email", customerDto.email);
        writer.writeStringValue("emergencyContactName", customerDto.emergencyContactName);
        writer.writeStringValue("emergencyContactPhone", customerDto.emergencyContactPhone);
        writer.writeStringValue("firstName", customerDto.firstName);
        writer.writeNumberValue("id", customerDto.id);
        writer.writeStringValue("lastName", customerDto.lastName);
        writer.writeStringValue("notes", customerDto.notes);
        writer.writeStringValue("phone", customerDto.phone);
        writer.writeStringValue("state", customerDto.state);
        writer.writeNumberValue("type", customerDto.type);
        writer.writeDateValue("updatedAt", customerDto.updatedAt);
        writer.writeNumberValue("updatedBy", customerDto.updatedBy);
        writer.writeStringValue("vatNumber", customerDto.vatNumber);
        writer.writeStringValue("zip", customerDto.zip);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCustomerInputDto(writer: SerializationWriter, customerInputDto: Partial<CustomerInputDto> | undefined | null = {}) : void {
    if (customerInputDto) {
        writer.writeStringValue("address", customerInputDto.address);
        writer.writeStringValue("city", customerInputDto.city);
        writer.writeStringValue("companyName", customerInputDto.companyName);
        writer.writeStringValue("country", customerInputDto.country);
        writer.writeDateValue("createdAt", customerInputDto.createdAt);
        writer.writeNumberValue("createdBy", customerInputDto.createdBy);
        writer.writeDateValue("driverLicenseExpiry", customerInputDto.driverLicenseExpiry);
        writer.writeStringValue("driverLicenseNumber", customerInputDto.driverLicenseNumber);
        writer.writeStringValue("email", customerInputDto.email);
        writer.writeStringValue("emergencyContactName", customerInputDto.emergencyContactName);
        writer.writeStringValue("emergencyContactPhone", customerInputDto.emergencyContactPhone);
        writer.writeStringValue("firstName", customerInputDto.firstName);
        writer.writeNumberValue("id", customerInputDto.id);
        writer.writeStringValue("lastName", customerInputDto.lastName);
        writer.writeStringValue("notes", customerInputDto.notes);
        writer.writeStringValue("phone", customerInputDto.phone);
        writer.writeStringValue("state", customerInputDto.state);
        writer.writeNumberValue("type", customerInputDto.type);
        writer.writeDateValue("updatedAt", customerInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", customerInputDto.updatedBy);
        writer.writeStringValue("vatNumber", customerInputDto.vatNumber);
        writer.writeStringValue("zip", customerInputDto.zip);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDurationTierDto(writer: SerializationWriter, durationTierDto: Partial<DurationTierDto> | undefined | null = {}) : void {
    if (durationTierDto) {
        writer.writeDateValue("createdAt", durationTierDto.createdAt);
        writer.writeNumberValue("createdBy", durationTierDto.createdBy);
        writer.writeNumberValue("id", durationTierDto.id);
        writer.writeNumberValue("maxDays", durationTierDto.maxDays);
        writer.writeNumberValue("minDays", durationTierDto.minDays);
        writer.writeStringValue("name", durationTierDto.name);
        writer.writeDateValue("updatedAt", durationTierDto.updatedAt);
        writer.writeNumberValue("updatedBy", durationTierDto.updatedBy);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDurationTierInputDto(writer: SerializationWriter, durationTierInputDto: Partial<DurationTierInputDto> | undefined | null = {}) : void {
    if (durationTierInputDto) {
        writer.writeDateValue("createdAt", durationTierInputDto.createdAt);
        writer.writeNumberValue("createdBy", durationTierInputDto.createdBy);
        writer.writeNumberValue("id", durationTierInputDto.id);
        writer.writeNumberValue("maxDays", durationTierInputDto.maxDays);
        writer.writeNumberValue("minDays", durationTierInputDto.minDays);
        writer.writeStringValue("name", durationTierInputDto.name);
        writer.writeDateValue("updatedAt", durationTierInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", durationTierInputDto.updatedBy);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInvoiceDto(writer: SerializationWriter, invoiceDto: Partial<InvoiceDto> | undefined | null = {}) : void {
    if (invoiceDto) {
        writer.writeNumberValue("amount", invoiceDto.amount);
        writer.writeNumberValue("bookingId", invoiceDto.bookingId);
        writer.writeDateValue("createdAt", invoiceDto.createdAt);
        writer.writeNumberValue("createdBy", invoiceDto.createdBy);
        writer.writeDateValue("dueDate", invoiceDto.dueDate);
        writer.writeNumberValue("id", invoiceDto.id);
        writer.writeStringValue("invoiceNumber", invoiceDto.invoiceNumber);
        writer.writeDateValue("issueDate", invoiceDto.issueDate);
        writer.writeNumberValue("paidAmount", invoiceDto.paidAmount);
        writer.writeNumberValue("status", invoiceDto.status);
        writer.writeDateValue("updatedAt", invoiceDto.updatedAt);
        writer.writeNumberValue("updatedBy", invoiceDto.updatedBy);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInvoiceInputDto(writer: SerializationWriter, invoiceInputDto: Partial<InvoiceInputDto> | undefined | null = {}) : void {
    if (invoiceInputDto) {
        writer.writeNumberValue("amount", invoiceInputDto.amount);
        writer.writeNumberValue("bookingId", invoiceInputDto.bookingId);
        writer.writeDateValue("createdAt", invoiceInputDto.createdAt);
        writer.writeNumberValue("createdBy", invoiceInputDto.createdBy);
        writer.writeDateValue("dueDate", invoiceInputDto.dueDate);
        writer.writeNumberValue("id", invoiceInputDto.id);
        writer.writeStringValue("invoiceNumber", invoiceInputDto.invoiceNumber);
        writer.writeDateValue("issueDate", invoiceInputDto.issueDate);
        writer.writeNumberValue("status", invoiceInputDto.status);
        writer.writeDateValue("updatedAt", invoiceInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", invoiceInputDto.updatedBy);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLocationDto(writer: SerializationWriter, locationDto: Partial<LocationDto> | undefined | null = {}) : void {
    if (locationDto) {
        writer.writeStringValue("address", locationDto.address);
        writer.writeStringValue("city", locationDto.city);
        writer.writeDateValue("createdAt", locationDto.createdAt);
        writer.writeNumberValue("createdBy", locationDto.createdBy);
        writer.writeNumberValue("id", locationDto.id);
        writer.writeBooleanValue("isActive", locationDto.isActive);
        writer.writeStringValue("name", locationDto.name);
        writer.writeStringValue("postalCode", locationDto.postalCode);
        writer.writeDateValue("updatedAt", locationDto.updatedAt);
        writer.writeNumberValue("updatedBy", locationDto.updatedBy);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLocationInputDto(writer: SerializationWriter, locationInputDto: Partial<LocationInputDto> | undefined | null = {}) : void {
    if (locationInputDto) {
        writer.writeStringValue("address", locationInputDto.address);
        writer.writeStringValue("city", locationInputDto.city);
        writer.writeDateValue("createdAt", locationInputDto.createdAt);
        writer.writeNumberValue("createdBy", locationInputDto.createdBy);
        writer.writeNumberValue("id", locationInputDto.id);
        writer.writeBooleanValue("isActive", locationInputDto.isActive);
        writer.writeStringValue("name", locationInputDto.name);
        writer.writeStringValue("postalCode", locationInputDto.postalCode);
        writer.writeDateValue("updatedAt", locationInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", locationInputDto.updatedBy);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMaintenanceRecordDto(writer: SerializationWriter, maintenanceRecordDto: Partial<MaintenanceRecordDto> | undefined | null = {}) : void {
    if (maintenanceRecordDto) {
        writer.writeNumberValue("cost", maintenanceRecordDto.cost);
        writer.writeDateValue("createdAt", maintenanceRecordDto.createdAt);
        writer.writeNumberValue("createdBy", maintenanceRecordDto.createdBy);
        writer.writeStringValue("description", maintenanceRecordDto.description);
        writer.writeNumberValue("id", maintenanceRecordDto.id);
        writer.writeDateValue("maintenanceDate", maintenanceRecordDto.maintenanceDate);
        writer.writeNumberValue("mileage", maintenanceRecordDto.mileage);
        writer.writeStringValue("serviceProvider", maintenanceRecordDto.serviceProvider);
        writer.writeNumberValue("type", maintenanceRecordDto.type);
        writer.writeDateValue("updatedAt", maintenanceRecordDto.updatedAt);
        writer.writeNumberValue("updatedBy", maintenanceRecordDto.updatedBy);
        writer.writeNumberValue("vehicleId", maintenanceRecordDto.vehicleId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMaintenanceRecordInputDto(writer: SerializationWriter, maintenanceRecordInputDto: Partial<MaintenanceRecordInputDto> | undefined | null = {}) : void {
    if (maintenanceRecordInputDto) {
        writer.writeNumberValue("cost", maintenanceRecordInputDto.cost);
        writer.writeDateValue("createdAt", maintenanceRecordInputDto.createdAt);
        writer.writeNumberValue("createdBy", maintenanceRecordInputDto.createdBy);
        writer.writeStringValue("description", maintenanceRecordInputDto.description);
        writer.writeNumberValue("id", maintenanceRecordInputDto.id);
        writer.writeDateValue("maintenanceDate", maintenanceRecordInputDto.maintenanceDate);
        writer.writeNumberValue("mileage", maintenanceRecordInputDto.mileage);
        writer.writeStringValue("serviceProvider", maintenanceRecordInputDto.serviceProvider);
        writer.writeNumberValue("type", maintenanceRecordInputDto.type);
        writer.writeDateValue("updatedAt", maintenanceRecordInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", maintenanceRecordInputDto.updatedBy);
        writer.writeNumberValue("vehicleId", maintenanceRecordInputDto.vehicleId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePaymentDto(writer: SerializationWriter, paymentDto: Partial<PaymentDto> | undefined | null = {}) : void {
    if (paymentDto) {
        writer.writeNumberValue("amount", paymentDto.amount);
        writer.writeDateValue("createdAt", paymentDto.createdAt);
        writer.writeNumberValue("createdBy", paymentDto.createdBy);
        writer.writeNumberValue("id", paymentDto.id);
        writer.writeNumberValue("invoiceId", paymentDto.invoiceId);
        writer.writeDateValue("paymentDate", paymentDto.paymentDate);
        writer.writeNumberValue("paymentMethod", paymentDto.paymentMethod);
        writer.writeStringValue("transactionReference", paymentDto.transactionReference);
        writer.writeDateValue("updatedAt", paymentDto.updatedAt);
        writer.writeNumberValue("updatedBy", paymentDto.updatedBy);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePaymentInputDto(writer: SerializationWriter, paymentInputDto: Partial<PaymentInputDto> | undefined | null = {}) : void {
    if (paymentInputDto) {
        writer.writeNumberValue("amount", paymentInputDto.amount);
        writer.writeDateValue("createdAt", paymentInputDto.createdAt);
        writer.writeNumberValue("createdBy", paymentInputDto.createdBy);
        writer.writeNumberValue("id", paymentInputDto.id);
        writer.writeNumberValue("invoiceId", paymentInputDto.invoiceId);
        writer.writeDateValue("paymentDate", paymentInputDto.paymentDate);
        writer.writeNumberValue("paymentMethod", paymentInputDto.paymentMethod);
        writer.writeStringValue("transactionReference", paymentInputDto.transactionReference);
        writer.writeDateValue("updatedAt", paymentInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", paymentInputDto.updatedBy);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQuotationDto(writer: SerializationWriter, quotationDto: Partial<QuotationDto> | undefined | null = {}) : void {
    if (quotationDto) {
        writer.writeNumberValue("amount", quotationDto.amount);
        writer.writeDateValue("createdAt", quotationDto.createdAt);
        writer.writeNumberValue("createdBy", quotationDto.createdBy);
        writer.writeNumberValue("customerId", quotationDto.customerId);
        writer.writeNumberValue("id", quotationDto.id);
        writer.writeNumberValue("status", quotationDto.status);
        writer.writeDateValue("updatedAt", quotationDto.updatedAt);
        writer.writeNumberValue("updatedBy", quotationDto.updatedBy);
        writer.writeDateValue("validUntil", quotationDto.validUntil);
        writer.writeNumberValue("vehicleId", quotationDto.vehicleId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQuotationInputDto(writer: SerializationWriter, quotationInputDto: Partial<QuotationInputDto> | undefined | null = {}) : void {
    if (quotationInputDto) {
        writer.writeNumberValue("amount", quotationInputDto.amount);
        writer.writeDateValue("createdAt", quotationInputDto.createdAt);
        writer.writeNumberValue("createdBy", quotationInputDto.createdBy);
        writer.writeNumberValue("customerId", quotationInputDto.customerId);
        writer.writeNumberValue("id", quotationInputDto.id);
        writer.writeNumberValue("status", quotationInputDto.status);
        writer.writeDateValue("updatedAt", quotationInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", quotationInputDto.updatedBy);
        writer.writeDateValue("validUntil", quotationInputDto.validUntil);
        writer.writeNumberValue("vehicleId", quotationInputDto.vehicleId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRoleDto(writer: SerializationWriter, roleDto: Partial<RoleDto> | undefined | null = {}) : void {
    if (roleDto) {
        writer.writeDateValue("createdAt", roleDto.createdAt);
        writer.writeNumberValue("createdBy", roleDto.createdBy);
        writer.writeStringValue("description", roleDto.description);
        writer.writeNumberValue("id", roleDto.id);
        writer.writeStringValue("name", roleDto.name);
        writer.writeDateValue("updatedAt", roleDto.updatedAt);
        writer.writeNumberValue("updatedBy", roleDto.updatedBy);
        writer.writeNumberValue("value", roleDto.value);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSeasonDto(writer: SerializationWriter, seasonDto: Partial<SeasonDto> | undefined | null = {}) : void {
    if (seasonDto) {
        writer.writeDateValue("createdAt", seasonDto.createdAt);
        writer.writeNumberValue("createdBy", seasonDto.createdBy);
        writer.writeDateValue("endDate", seasonDto.endDate);
        writer.writeNumberValue("id", seasonDto.id);
        writer.writeStringValue("name", seasonDto.name);
        writer.writeDateValue("startDate", seasonDto.startDate);
        writer.writeNumberValue("type", seasonDto.type);
        writer.writeDateValue("updatedAt", seasonDto.updatedAt);
        writer.writeNumberValue("updatedBy", seasonDto.updatedBy);
        writer.writeNumberValue("year", seasonDto.year);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSeasonInputDto(writer: SerializationWriter, seasonInputDto: Partial<SeasonInputDto> | undefined | null = {}) : void {
    if (seasonInputDto) {
        writer.writeDateValue("createdAt", seasonInputDto.createdAt);
        writer.writeNumberValue("createdBy", seasonInputDto.createdBy);
        writer.writeDateValue("endDate", seasonInputDto.endDate);
        writer.writeNumberValue("id", seasonInputDto.id);
        writer.writeStringValue("name", seasonInputDto.name);
        writer.writeDateValue("startDate", seasonInputDto.startDate);
        writer.writeNumberValue("type", seasonInputDto.type);
        writer.writeDateValue("updatedAt", seasonInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", seasonInputDto.updatedBy);
        writer.writeNumberValue("year", seasonInputDto.year);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserDto(writer: SerializationWriter, userDto: Partial<UserDto> | undefined | null = {}) : void {
    if (userDto) {
        writer.writeDateValue("createdAt", userDto.createdAt);
        writer.writeNumberValue("createdBy", userDto.createdBy);
        writer.writeStringValue("email", userDto.email);
        writer.writeStringValue("firstName", userDto.firstName);
        writer.writeNumberValue("id", userDto.id);
        writer.writeStringValue("lastName", userDto.lastName);
        writer.writeDateValue("updatedAt", userDto.updatedAt);
        writer.writeNumberValue("updatedBy", userDto.updatedBy);
        writer.writeStringValue("username", userDto.username);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserInputDto(writer: SerializationWriter, userInputDto: Partial<UserInputDto> | undefined | null = {}) : void {
    if (userInputDto) {
        writer.writeDateValue("createdAt", userInputDto.createdAt);
        writer.writeNumberValue("createdBy", userInputDto.createdBy);
        writer.writeStringValue("email", userInputDto.email);
        writer.writeStringValue("firstName", userInputDto.firstName);
        writer.writeNumberValue("id", userInputDto.id);
        writer.writeStringValue("lastName", userInputDto.lastName);
        writer.writeDateValue("updatedAt", userInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", userInputDto.updatedBy);
        writer.writeStringValue("username", userInputDto.username);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVehicleDto(writer: SerializationWriter, vehicleDto: Partial<VehicleDto> | undefined | null = {}) : void {
    if (vehicleDto) {
        writer.writeStringValue("brand", vehicleDto.brand);
        writer.writeNumberValue("category", vehicleDto.category);
        writer.writeDateValue("createdAt", vehicleDto.createdAt);
        writer.writeNumberValue("createdBy", vehicleDto.createdBy);
        writer.writeStringValue("fuelType", vehicleDto.fuelType);
        writer.writeNumberValue("id", vehicleDto.id);
        writer.writeNumberValue("mileage", vehicleDto.mileage);
        writer.writeStringValue("model", vehicleDto.model);
        writer.writeStringValue("registrationNumber", vehicleDto.registrationNumber);
        writer.writeNumberValue("status", vehicleDto.status);
        writer.writeStringValue("transmission", vehicleDto.transmission);
        writer.writeNumberValue("type", vehicleDto.type);
        writer.writeDateValue("updatedAt", vehicleDto.updatedAt);
        writer.writeNumberValue("updatedBy", vehicleDto.updatedBy);
        writer.writeNumberValue("year", vehicleDto.year);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVehicleIncidentDto(writer: SerializationWriter, vehicleIncidentDto: Partial<VehicleIncidentDto> | undefined | null = {}) : void {
    if (vehicleIncidentDto) {
        writer.writeDateValue("createdAt", vehicleIncidentDto.createdAt);
        writer.writeNumberValue("createdBy", vehicleIncidentDto.createdBy);
        writer.writeStringValue("description", vehicleIncidentDto.description);
        writer.writeNumberValue("id", vehicleIncidentDto.id);
        writer.writeNumberValue("partLocation", vehicleIncidentDto.partLocation);
        writer.writeCollectionOfObjectValues<VehicleIncidentPhotoDto>("photos", vehicleIncidentDto.photos, serializeVehicleIncidentPhotoDto);
        writer.writeNumberValue("type", vehicleIncidentDto.type);
        writer.writeDateValue("updatedAt", vehicleIncidentDto.updatedAt);
        writer.writeNumberValue("updatedBy", vehicleIncidentDto.updatedBy);
        writer.writeNumberValue("vehicleInspectionId", vehicleIncidentDto.vehicleInspectionId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVehicleIncidentInputDto(writer: SerializationWriter, vehicleIncidentInputDto: Partial<VehicleIncidentInputDto> | undefined | null = {}) : void {
    if (vehicleIncidentInputDto) {
        writer.writeDateValue("createdAt", vehicleIncidentInputDto.createdAt);
        writer.writeNumberValue("createdBy", vehicleIncidentInputDto.createdBy);
        writer.writeStringValue("description", vehicleIncidentInputDto.description);
        writer.writeNumberValue("id", vehicleIncidentInputDto.id);
        writer.writeNumberValue("partLocation", vehicleIncidentInputDto.partLocation);
        writer.writeNumberValue("type", vehicleIncidentInputDto.type);
        writer.writeDateValue("updatedAt", vehicleIncidentInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", vehicleIncidentInputDto.updatedBy);
        writer.writeNumberValue("vehicleInspectionId", vehicleIncidentInputDto.vehicleInspectionId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVehicleIncidentPhotoDto(writer: SerializationWriter, vehicleIncidentPhotoDto: Partial<VehicleIncidentPhotoDto> | undefined | null = {}) : void {
    if (vehicleIncidentPhotoDto) {
        writer.writeStringValue("caption", vehicleIncidentPhotoDto.caption);
        writer.writeDateValue("createdAt", vehicleIncidentPhotoDto.createdAt);
        writer.writeNumberValue("createdBy", vehicleIncidentPhotoDto.createdBy);
        writer.writeNumberValue("id", vehicleIncidentPhotoDto.id);
        writer.writeStringValue("photoUrl", vehicleIncidentPhotoDto.photoUrl);
        writer.writeDateValue("updatedAt", vehicleIncidentPhotoDto.updatedAt);
        writer.writeNumberValue("updatedBy", vehicleIncidentPhotoDto.updatedBy);
        writer.writeNumberValue("vehicleIncidentId", vehicleIncidentPhotoDto.vehicleIncidentId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVehicleIncidentPhotoInputDto(writer: SerializationWriter, vehicleIncidentPhotoInputDto: Partial<VehicleIncidentPhotoInputDto> | undefined | null = {}) : void {
    if (vehicleIncidentPhotoInputDto) {
        writer.writeStringValue("caption", vehicleIncidentPhotoInputDto.caption);
        writer.writeDateValue("createdAt", vehicleIncidentPhotoInputDto.createdAt);
        writer.writeNumberValue("createdBy", vehicleIncidentPhotoInputDto.createdBy);
        writer.writeNumberValue("id", vehicleIncidentPhotoInputDto.id);
        writer.writeStringValue("photoUrl", vehicleIncidentPhotoInputDto.photoUrl);
        writer.writeDateValue("updatedAt", vehicleIncidentPhotoInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", vehicleIncidentPhotoInputDto.updatedBy);
        writer.writeNumberValue("vehicleIncidentId", vehicleIncidentPhotoInputDto.vehicleIncidentId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVehicleInputDto(writer: SerializationWriter, vehicleInputDto: Partial<VehicleInputDto> | undefined | null = {}) : void {
    if (vehicleInputDto) {
        writer.writeStringValue("brand", vehicleInputDto.brand);
        writer.writeNumberValue("category", vehicleInputDto.category);
        writer.writeDateValue("createdAt", vehicleInputDto.createdAt);
        writer.writeNumberValue("createdBy", vehicleInputDto.createdBy);
        writer.writeStringValue("fuelType", vehicleInputDto.fuelType);
        writer.writeNumberValue("id", vehicleInputDto.id);
        writer.writeNumberValue("mileage", vehicleInputDto.mileage);
        writer.writeStringValue("model", vehicleInputDto.model);
        writer.writeStringValue("registrationNumber", vehicleInputDto.registrationNumber);
        writer.writeNumberValue("status", vehicleInputDto.status);
        writer.writeStringValue("transmission", vehicleInputDto.transmission);
        writer.writeNumberValue("type", vehicleInputDto.type);
        writer.writeDateValue("updatedAt", vehicleInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", vehicleInputDto.updatedBy);
        writer.writeNumberValue("year", vehicleInputDto.year);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVehicleInspectionDto(writer: SerializationWriter, vehicleInspectionDto: Partial<VehicleInspectionDto> | undefined | null = {}) : void {
    if (vehicleInspectionDto) {
        writer.writeNumberValue("bookingId", vehicleInspectionDto.bookingId);
        writer.writeDateValue("createdAt", vehicleInspectionDto.createdAt);
        writer.writeNumberValue("createdBy", vehicleInspectionDto.createdBy);
        writer.writeNumberValue("fuelLevel", vehicleInspectionDto.fuelLevel);
        writer.writeNumberValue("id", vehicleInspectionDto.id);
        writer.writeCollectionOfObjectValues<VehicleIncidentDto>("incidents", vehicleInspectionDto.incidents, serializeVehicleIncidentDto);
        writer.writeNumberValue("inspectedByUserId", vehicleInspectionDto.inspectedByUserId);
        writer.writeDateValue("inspectionDate", vehicleInspectionDto.inspectionDate);
        writer.writeNumberValue("mileage", vehicleInspectionDto.mileage);
        writer.writeStringValue("notes", vehicleInspectionDto.notes);
        writer.writeStringValue("signatureUrl", vehicleInspectionDto.signatureUrl);
        writer.writeNumberValue("type", vehicleInspectionDto.type);
        writer.writeDateValue("updatedAt", vehicleInspectionDto.updatedAt);
        writer.writeNumberValue("updatedBy", vehicleInspectionDto.updatedBy);
        writer.writeBooleanValue("vehicleCleaned", vehicleInspectionDto.vehicleCleaned);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVehicleInspectionInputDto(writer: SerializationWriter, vehicleInspectionInputDto: Partial<VehicleInspectionInputDto> | undefined | null = {}) : void {
    if (vehicleInspectionInputDto) {
        writer.writeNumberValue("bookingId", vehicleInspectionInputDto.bookingId);
        writer.writeDateValue("createdAt", vehicleInspectionInputDto.createdAt);
        writer.writeNumberValue("createdBy", vehicleInspectionInputDto.createdBy);
        writer.writeNumberValue("fuelLevel", vehicleInspectionInputDto.fuelLevel);
        writer.writeNumberValue("id", vehicleInspectionInputDto.id);
        writer.writeNumberValue("inspectedByUserId", vehicleInspectionInputDto.inspectedByUserId);
        writer.writeDateValue("inspectionDate", vehicleInspectionInputDto.inspectionDate);
        writer.writeNumberValue("mileage", vehicleInspectionInputDto.mileage);
        writer.writeStringValue("notes", vehicleInspectionInputDto.notes);
        writer.writeStringValue("signatureUrl", vehicleInspectionInputDto.signatureUrl);
        writer.writeNumberValue("type", vehicleInspectionInputDto.type);
        writer.writeDateValue("updatedAt", vehicleInspectionInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", vehicleInspectionInputDto.updatedBy);
        writer.writeBooleanValue("vehicleCleaned", vehicleInspectionInputDto.vehicleCleaned);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVehiclePricingDto(writer: SerializationWriter, vehiclePricingDto: Partial<VehiclePricingDto> | undefined | null = {}) : void {
    if (vehiclePricingDto) {
        writer.writeDateValue("createdAt", vehiclePricingDto.createdAt);
        writer.writeNumberValue("createdBy", vehiclePricingDto.createdBy);
        writer.writeNumberValue("dailyRate", vehiclePricingDto.dailyRate);
        writer.writeObjectValue<DurationTierDto>("durationTier", vehiclePricingDto.durationTier, serializeDurationTierDto);
        writer.writeNumberValue("durationTierId", vehiclePricingDto.durationTierId);
        writer.writeNumberValue("id", vehiclePricingDto.id);
        writer.writeObjectValue<SeasonDto>("season", vehiclePricingDto.season, serializeSeasonDto);
        writer.writeNumberValue("seasonId", vehiclePricingDto.seasonId);
        writer.writeDateValue("updatedAt", vehiclePricingDto.updatedAt);
        writer.writeNumberValue("updatedBy", vehiclePricingDto.updatedBy);
        writer.writeObjectValue<VehicleDto>("vehicle", vehiclePricingDto.vehicle, serializeVehicleDto);
        writer.writeNumberValue("vehicleId", vehiclePricingDto.vehicleId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVehiclePricingInputDto(writer: SerializationWriter, vehiclePricingInputDto: Partial<VehiclePricingInputDto> | undefined | null = {}) : void {
    if (vehiclePricingInputDto) {
        writer.writeDateValue("createdAt", vehiclePricingInputDto.createdAt);
        writer.writeNumberValue("createdBy", vehiclePricingInputDto.createdBy);
        writer.writeNumberValue("dailyRate", vehiclePricingInputDto.dailyRate);
        writer.writeNumberValue("durationTierId", vehiclePricingInputDto.durationTierId);
        writer.writeNumberValue("id", vehiclePricingInputDto.id);
        writer.writeNumberValue("seasonId", vehiclePricingInputDto.seasonId);
        writer.writeDateValue("updatedAt", vehiclePricingInputDto.updatedAt);
        writer.writeNumberValue("updatedBy", vehiclePricingInputDto.updatedBy);
        writer.writeNumberValue("vehicleId", vehiclePricingInputDto.vehicleId);
    }
}
export interface UserDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The username property
     */
    username?: string | null;
}
export interface UserInputDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The username property
     */
    username?: string | null;
}
export interface VehicleDto extends Parsable {
    /**
     * The brand property
     */
    brand?: string | null;
    /**
     * The category property
     */
    category?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The fuelType property
     */
    fuelType?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The model property
     */
    model?: string | null;
    /**
     * The registrationNumber property
     */
    registrationNumber?: string | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The transmission property
     */
    transmission?: string | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The year property
     */
    year?: number | null;
}
export interface VehicleIncidentDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The partLocation property
     */
    partLocation?: number | null;
    /**
     * The photos property
     */
    photos?: VehicleIncidentPhotoDto[] | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicleInspectionId property
     */
    vehicleInspectionId?: number | null;
}
export interface VehicleIncidentInputDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The partLocation property
     */
    partLocation?: number | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicleInspectionId property
     */
    vehicleInspectionId?: number | null;
}
export interface VehicleIncidentPhotoDto extends Parsable {
    /**
     * The caption property
     */
    caption?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The photoUrl property
     */
    photoUrl?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicleIncidentId property
     */
    vehicleIncidentId?: number | null;
}
export interface VehicleIncidentPhotoInputDto extends Parsable {
    /**
     * The caption property
     */
    caption?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The photoUrl property
     */
    photoUrl?: string | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicleIncidentId property
     */
    vehicleIncidentId?: number | null;
}
export interface VehicleInputDto extends Parsable {
    /**
     * The brand property
     */
    brand?: string | null;
    /**
     * The category property
     */
    category?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The fuelType property
     */
    fuelType?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The model property
     */
    model?: string | null;
    /**
     * The registrationNumber property
     */
    registrationNumber?: string | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The transmission property
     */
    transmission?: string | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The year property
     */
    year?: number | null;
}
export interface VehicleInspectionDto extends Parsable {
    /**
     * The bookingId property
     */
    bookingId?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The fuelLevel property
     */
    fuelLevel?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The incidents property
     */
    incidents?: VehicleIncidentDto[] | null;
    /**
     * The inspectedByUserId property
     */
    inspectedByUserId?: number | null;
    /**
     * The inspectionDate property
     */
    inspectionDate?: Date | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The notes property
     */
    notes?: string | null;
    /**
     * The signatureUrl property
     */
    signatureUrl?: string | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicleCleaned property
     */
    vehicleCleaned?: boolean | null;
}
export interface VehicleInspectionInputDto extends Parsable {
    /**
     * The bookingId property
     */
    bookingId?: number | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The fuelLevel property
     */
    fuelLevel?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The inspectedByUserId property
     */
    inspectedByUserId?: number | null;
    /**
     * The inspectionDate property
     */
    inspectionDate?: Date | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The notes property
     */
    notes?: string | null;
    /**
     * The signatureUrl property
     */
    signatureUrl?: string | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicleCleaned property
     */
    vehicleCleaned?: boolean | null;
}
export interface VehiclePricingDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The dailyRate property
     */
    dailyRate?: number | null;
    /**
     * The durationTier property
     */
    durationTier?: DurationTierDto | null;
    /**
     * The durationTierId property
     */
    durationTierId?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The season property
     */
    season?: SeasonDto | null;
    /**
     * The seasonId property
     */
    seasonId?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicle property
     */
    vehicle?: VehicleDto | null;
    /**
     * The vehicleId property
     */
    vehicleId?: number | null;
}
export interface VehiclePricingInputDto extends Parsable {
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The createdBy property
     */
    createdBy?: number | null;
    /**
     * The dailyRate property
     */
    dailyRate?: number | null;
    /**
     * The durationTierId property
     */
    durationTierId?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The seasonId property
     */
    seasonId?: number | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
    /**
     * The updatedBy property
     */
    updatedBy?: number | null;
    /**
     * The vehicleId property
     */
    vehicleId?: number | null;
}
/* tslint:enable */
/* eslint-enable */
